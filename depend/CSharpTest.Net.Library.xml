<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpTest.Net.Library</name>
    </assembly>
    <members>
        <member name="T:CSharpTest.Net.Utils.ArgumentList">
            <summary>
            This is a private class as the means of sharing is to simply include the source file not
            reference a library.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the ArgumentList class using the argument list provided
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.#ctor(System.StringComparer,System.String[])">
            <summary>
            Initializes a new instance of the ArgumentList class using the argument list provided
            and using the string comparer provided, by default this is case-insensitive
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.AddRange(System.String[])">
            <summary>
            Parses the strings provided for switch names and optionally values, by default in one
            of the following forms: "/name=value", "/name:value", "-name=value", "-name:value"
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Add(System.String,System.String)">
            <summary>
            Adds a name/value pair to the collection of arguments, if value is null the name is
            added with no values.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.TryGetValue(System.String,CSharpTest.Net.Utils.ArgumentList.Item@)">
            <summary>
            Returns true if the value was found by that name and set the output value
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.TryGetValue(System.String,System.String@)">
            <summary>
            Returns true if the value was found by that name and set the output value
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.SafeGet(System.String)">
            <summary>
            Returns an Item of name even if it does not exist
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.TryParseNameValue(System.String,System.String@,System.String@)">
            <summary>
            Attempts to parse a name value pair from '/name=value' format
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Remove(System.String[]@,System.String,System.String@)">
            <summary>
            Searches the arguments until it finds a switch or value by the name in find and
            if found it will:
            A) Remove the item from the arguments
            B) Set the out parameter value to any value found, or null if just '/name'
            C) Returns true that it was found and removed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.GetKeyForItem(CSharpTest.Net.Utils.ArgumentList.Item)">
            <summary>
            Abract override for extracting key
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Parse(System.String)">
            <summary> Parses the individual arguments from the given input string. </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Join(System.String[])">
            <summary> The inverse of Parse, joins the arguments together and properly escapes output </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.DefaultComparison">
            <summary>
            Controls the default string comparer used for this class
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.PrefixChars">
            <summary>
            Controls the allowable prefix characters that will preceed named arguments
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.NameDelimeters">
            <summary>
            Controls the allowable delimeter characters seperate argument names from values
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.Unnamed">
            <summary>
            Returns a list of arguments that did not start with a character in the PrefixChars
            static collection.  These arguments can be modified by the methods on the returned
            collection, or you set this property to a new collection (a copy is made).
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.Keys">
            <summary>
            A string collection of all keys in the arguments
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.ArgumentList.Item">
            <summary>
            This is a single named argument within an argument list collection, this
            can be implicitly assigned to a string, or a string[] array
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Item.#ctor(System.String,System.String[])">
            <summary>
            Constructs an item for the name and values provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Item.ToArray">
            <summary>
            Same as the .Values property, returns the collection of items in this named slot
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Item.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add one or more values to this named item
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Item.op_Implicit(CSharpTest.Net.Utils.ArgumentList.Item)~System.Collections.Generic.KeyValuePair{System.String,System.String[]}">
            <summary>
            Converts this item to key-value pair to rem to a dictionary
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Item.op_Implicit(CSharpTest.Net.Utils.ArgumentList.Item)~System.String">
            <summary>
            Converts this item to a string by getting the first value or null if none
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Item.op_Implicit(CSharpTest.Net.Utils.ArgumentList.Item)~System.String[]">
            <summary>
            Converts this item to array of strings
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.Item.Name">
            <summary>
            Returns the name of this item
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.Item.Value">
            <summary>
            Returns the first value of this named item or null if one doesn't exist
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.Item.Values">
            <summary>
            Returns the collection of items in this named slot
            </summary>
        </member>
        <member name="T:Check">
            <summary>
            provides a set of runtime validations for inputs
            </summary>
        </member>
        <member name="M:Check.Assert``1(System.Boolean)">
            <summary>
            Verifies that the condition is true and if it fails constructs the specified type of
            exception and throws.
            </summary>
        </member>
        <member name="M:Check.Assert``1(System.Boolean,System.String)">
            <summary>
            Verifies that the condition is true and if it fails constructs the specified type of
            exception with any arguments provided and throws.
            </summary>
        </member>
        <member name="M:Check.Assert(System.Boolean,Check.ExceptionBuilder)">
            <summary>
            Verifies that the condition is true and if it fails throws the execption returned
            by fnExceptionBuilder()
            </summary>
        </member>
        <member name="M:Check.Assert``1(System.Boolean,System.String,System.Exception)">
            <summary>
            Verifies that the condition is true and if it fails constructs the specified type of
            exception with any arguments provided and throws.
            </summary>
        </member>
        <member name="M:Check.NotNull``1(``0)">
            <summary>
            Verifies that value is not null and returns the value or throws ArgumentNullException
            </summary>
        </member>
        <member name="M:Check.NotEmpty(System.String)">
            <summary>
            Verfies that the string is not null and not empty and returns the string.
            throws ArgumentNullException, ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.NotEmpty(System.Guid)">
            <summary>
            Verfies that the Guid is not empty.
            throws ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.NotEmpty``1(``0)">
            <summary>
            Verfies that the collection is not null and not empty and returns the collection.
            throws ArgumentNullException, ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.IsEqual``1(``0,``0)">
            <summary>
            Verifies that the two values are the same
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.NotEqual``1(``0,``0)">
            <summary>
            Verifies that the two values are NOT the same
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.ArraySize``1(``0[],System.Int32,System.Int32)">
            <summary>
            Verifies that the array is not empty and has at least min, but not more than max items.
            throws ArgumentNullExcpetion
            throws ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.InRange``1(``0,``0,``0)">
            <summary>
            Verifies that the value is min, max, or between the two.
            throws ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.IsAssignable``1(System.Object)">
            <summary>
            Returns (T)value if the object provided can be assinged to a variable of type T
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.IsAssignable(System.Type,System.Object)">
            <summary>
            Returns value if the object provided can be assinged to a variable of type toType
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.IsAssignable(System.Type,System.Type)">
            <summary>
            Throws ArgumentException if the type fromType cannot be assigned to variable of type toType
            </summary>
        </member>
        <member name="T:Check.ExceptionBuilder">
            <summary>
            Used to delay creation of the excpetion until the condition fails.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.XmlConfiguration`1">
            <summary>
            This is basically a big hack on the whole configuration system, it's purpose is to avoid
            the entire thing.  Where argument T is any [XmlSerializable] object this class can deserialize
            it from the configuration file.  It looks for an xsd either embeded into typeof(T).Assembly or
            in the local filesystem.  The Xsd must be named typeof(T).FullName + ".xsd" to be found by this
            class.  If found validation will occur durring the deserialization process and an exception of
            type XmlException() will be raised on errors.  Optionally, you can directly set the schema via
            the static XmlSchema property.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.XmlConfiguration`1.XmlSchema">
            <summary>
            Allows explicit setting of the XmlSchema to use when validating the xml input.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.#ctor">
            <summary>
            Constructs the XmlConfiguration element assuming that the derived type name
            is the same name as the xsd file name, i.e. "MyCfg : XmlConfiguration" would
            expect an XSD named "MyCfg.xsd" to either exist on disk or be embeded into
            the type's containing assembly.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.#ctor(System.String)">
            <summary>
            Explicitly sets the xsd file name to use.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.ReadComplete(`0)">
            <summary>
            Provides a derived class with the ability to do post-read validation not represented in
            the xsd (or in place of an xsd).
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.DeserializeSection(System.Xml.XmlReader)">
            <summary>
            The main work goes here, builds the reader and validator and deserializes the object.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.ReadConfig(System.String)">
            <summary>
            Reads and extracts the configuration settings from the current application's configuraiton file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserialize the xml configuration directly from an XmlReader instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.ReadXml(System.String,System.Xml.XmlReader)">
            <summary>
            Deserialize the xml configuration directly from an XmlReader instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.op_Implicit(CSharpTest.Net.Utils.XmlConfiguration{`0})~`0">
            <summary>
            Allows implicit casting of the configuration element to the actual type contained.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.XmlConfiguration`1.Settings">
            <summary>
            Allows access to the deserialized data
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.FileList">
            <summary>
            A utility class for gathering files
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.#ctor">
            <summary>
            Creates an empty FileList
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.#ctor(System.String[])">
            <summary>
            Constructs a FileList containing the files specified or found within the directories
            specified.  See Add(string) for more details.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.#ctor(System.IO.FileAttributes,System.String[])">
            <summary>
            Constructs a FileList containing the files specified or found within the directories
            specified.  See Add(string) for more details.  Files and directories that contain the 
            attribtes defined in prohibitedAttributes will be ignored, use '0' for everything.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.#ctor(System.IO.FileInfo[])">
            <summary>
            Creates a list containing the specified FileInfo records.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.Add(System.String[])">
            <summary>
            Adds a set of items to the collection, see Add(string) for details.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.Add(System.String)">
            <summary>
            Adds the specified file to the collection.  If the item specified is a directory
            that directory will be crawled for files, and optionally (RecurseFolders) child
            directories.  If the name part of the path contains wild-cards they will be
            considered throughout the folder tree, i.e: C:\Temp\*.tmp will yeild all files
            having an extension of .tmp.  Again if RecurseFolders is true you will get all
            .tmp files anywhere in the C:\Temp folder.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.Contains(System.IO.FileInfo)">
            <summary>
            Returns true if the given file is in the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.AddRange(System.IO.FileInfo[])">
            <summary>
            Adds one or files to the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.Remove(System.IO.FileInfo[])">
            <summary>
            Remove the files specified if they exist in the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.ToArray">
            <summary>
            Returns the collection of FileInfo as an array
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.GetFileNames">
            <summary>
            Converts all FileInfo elements into their fully-qualified file names
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.GetKeyForItem(System.IO.FileInfo)">
            <summary>
            The key for the specified element.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.FileList.RecurseFolders">
            <summary>
            Gets or sets a value that allows traversal of all directories added.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.FileList.IgnoreFolderAttributes">
            <summary>
            Setting this will greatly improve performance at the cost of not evaluating filters on directories
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.FileList.ProhibitedAttributes">
            <summary>
            Set this to the set of attributes that if a directory or file contains should be skipped. For
            example when set to FileAttributes.Hidden, hidden files and folders will be ignored.
            </summary>
        </member>
        <member name="E:CSharpTest.Net.Utils.FileList.FileFound">
            <summary>
            Raised when a new file is about to be added to the collection, set e.Ignore
            to true will cancel the addition of this file.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.FileList.FileFoundEventArgs">
            <summary>
            Event args passed to the FileFound event
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.FileList.FileFoundEventArgs.Ignore">
            <summary>
            Allows manually filtering a file by setting Ignore=true;
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.FileList.FileFoundEventArgs.File">
            <summary>
            Provides access to the FileInfo of this item
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.FileFoundEventArgs.#ctor(System.Boolean,System.IO.FileInfo)">
            <summary>
            Constructs the event args
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.ProcessInfo">
            <summary>
            Utility class for obtaining information about the currently running
            process and AppDomain
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.UNKNOWN">
            <summary> Returns the string '[Unknown]'</summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.ProcessId">
            <summary> Returns the current process id </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.ProcessName">
            <summary> Returns the current process name without an extension </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.ProcessFile">
            <summary> Returns the file path to the exe for this process </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.AppDomainName">
            <summary> Returns the current AppDomain's friendly name </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.EntryAssembly">
            <summary> Returns the entry-point assembly or the highest stack assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.ProductVersion">
            <summary> Returns the product version of the entry assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.ProductName">
            <summary> Returns the product name of the entry assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.CompanyName">
            <summary> Returns the company name of the entry assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.IsDebugging">
            <summary> Returns true if a debugger is attached to the process </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.RegistrySoftwarePath">
            <summary>
            Returns the HKCU or HKLM path for this software application based
            on the process that is running: Software\{CompanyName}\{ProductName}
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.ApplicationData">
            <summary>
            Returns the roaming user profile path for the currently running software
            application: {SpecialFolder.ApplicationData}\{CompanyName}\{ProductName}
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.LocalApplicationData">
            <summary>
            Returns the non-roaming user profile path for the currently running software
            application: {SpecialFolder.LocalApplicationData}\{CompanyName}\{ProductName}
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.DefaultLogFile">
            <summary>
            Returns a default log file name derived as:
            {SpecialFolder.LocalApplicationData}\{CompanyName}\{ProductName}\{AppDomainName}.txt
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ProcessInfo.#ctor">
            <summary>
            This is some ugly code, the intent is to be able to answer the above questions in 
            a wide array of environments.  I admit now this may fail eventually.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ProcessInfo.SafeName(System.String)">
            <summary>
            Copy from StringUtils
            </summary>
        </member>
        <member name="T:CSharpTest.Net.AppConfig.UserSettingsSection">
            <summary>
            Provides a store for user settings in the same format as appSettings
            </summary>
        </member>
        <member name="F:CSharpTest.Net.AppConfig.UserSettingsSection.SECTION_NAME">
            <summary>
            The name of the user section: userSettings
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSection.UpgradeUserSettings(System.Configuration.Configuration,CSharpTest.Net.AppConfig.UserSettingsSection)">
            <summary>
            Searches for old user settings from previous versions and copies them into the
            configuration provided.
            </summary>
            <param name="config">The configuration to inspect for previous versions</param>
            <param name="settings">The destination UserSettingsSection object</param>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSection.UpgradeSettingsFromFile(System.Configuration.Configuration,CSharpTest.Net.AppConfig.UserSettingsSection,System.String,System.String,System.String)">
            <summary>
            Forces a read of the configuration file specified and copies the settings from
            the old file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSection.UserSettingsFrom(System.Configuration.Configuration)">
            <summary>
            Retrieves the current UserSettingsSection from the specified configuration, if none
            exists a new one is created.  If a previous version of the userSettings exists they
            will be copied to the UserSettingsSection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSection.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Overloaded to ignore namespace declaration and useage so that we can identify the XSD
            file that should be used.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSection.PreSerialize(System.Xml.XmlWriter)">
            <summary>
            Overloaded to insert namespace declaration of xml schema and include our own schema file
            aut0magically.  This is a development aid that is not enforced durring read of the xml.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSection.CopyFrom(CSharpTest.Net.AppConfig.UserSettingsSection)">
            <summary>
            Deep copy of all settings from one configuration to another.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.OriginalVersion">
            <summary>
            Describes the version of the application that originally wrote the configuration
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.UpgradedVersion">
            <summary>
            The version that the user settings were previously updagraded from
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.UpgradedDate">
            <summary>
            The last date/time the settings were upgraded from the upgradedVersion
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.DefaultSettings">
            <summary>
            if available, returns the default userSettings from the app's configuration file
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.UserSettings">
            <summary>
            Retrieves the current UserSettingsSection from the default configuration
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.Settings">
            <summary>
            Retrieves the collection of key/value settings
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.Sections">
            <summary>
            Retrieves a collection of named sections within the userSettings container
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.Item(System.String)">
            <summary>
            Gets or sets a key/value pair in the collection of settings
            </summary>
        </member>
        <member name="T:CSharpTest.Net.AppConfig.UserSettingsSubSection">
            <summary>
            Provides a store for user settings in the same format as appSettings
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSection.CompareTo(CSharpTest.Net.AppConfig.UserSettingsSubSection)">
            <summary>
            Provides key comparison between two sections
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSection.CopyFrom(CSharpTest.Net.AppConfig.UserSettingsSubSection)">
            <summary>
            Deep copy of all settings from one configuration to another.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSubSection.Name">
            <summary>
            Returns the key name of the section within the userSettings collection
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSubSection.Settings">
            <summary>
            Retrieves the collection of key/value settings
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSubSection.Item(System.String)">
            <summary>
            Gets or sets a key/value pair in the collection of settings
            </summary>
        </member>
        <member name="T:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection">
            <summary>
            Provides a collection of name keyed sections that contain more key/value settings
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.#ctor">
            <summary>
            Constructs a collection of named sections
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.CreateNewElement">
            <summary> creates a new UserSettingsSubSection </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.CreateNewElement(System.String)">
            <summary> creates a new UserSettingsSubSection </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> Returns the name of the UserSettingsSubSection </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.Add(System.String)">
            <summary>
            Adds a new section with the specified name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.Remove(System.String)">
            <summary>
            Removes the specified collection by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.Clear">
            <summary>
            Clears all elements from the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.CopyFrom(CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection)">
            <summary>
            Deep copy of all settings from one configuration to another.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.CollectionType">
            <summary>
            Gets the type of the System.Configuration.ConfigurationElementCollection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.Item(System.String)">
            <summary>
            Returns the specified collection by name if it exists, or null if not found
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Bases.Comparable`1">
            <summary> Provides a base-class for non-reference comparison of objects </summary>
        </member>
        <member name="T:CSharpTest.Net.Bases.Equatable`1">
            <summary> Provides a base-class for non-reference equality objects </summary>
        </member>
        <member name="F:CSharpTest.Net.Bases.Equatable`1.Comparer">
            <summary> return a non-reference equality comparer for this class </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.Equals(`0)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.Equals(System.Object)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.GetHashCode">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.Equals(`0,`0)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.GetHashCode(`0)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.op_Equality(CSharpTest.Net.Bases.Equatable{`0},CSharpTest.Net.Bases.Equatable{`0})">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.op_Inequality(CSharpTest.Net.Bases.Equatable{`0},CSharpTest.Net.Bases.Equatable{`0})">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="P:CSharpTest.Net.Bases.Equatable`1.HashCode">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="T:CSharpTest.Net.Bases.Equatable`1.EqualityComparer">
            <summary> Implements the equality comparer </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.EqualityComparer.Equals(`0,`0)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.EqualityComparer.GetHashCode(`0)">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="F:CSharpTest.Net.Bases.Comparable`1.Comparer">
            <summary> returns a non-reference comparer for this class </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.Equals(`0)">
            <summary> Returns true if the object is equal </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.CompareTo(`0)">
            <summary> Compares with another object of T </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.op_LessThan(CSharpTest.Net.Bases.Comparable{`0},CSharpTest.Net.Bases.Comparable{`0})">
            <summary> Compares two objects </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.op_LessThanOrEqual(CSharpTest.Net.Bases.Comparable{`0},CSharpTest.Net.Bases.Comparable{`0})">
            <summary> Compares two objects </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.op_GreaterThan(CSharpTest.Net.Bases.Comparable{`0},CSharpTest.Net.Bases.Comparable{`0})">
            <summary> Compares two objects </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.op_GreaterThanOrEqual(CSharpTest.Net.Bases.Comparable{`0},CSharpTest.Net.Bases.Comparable{`0})">
            <summary> Compares two objects </summary>
        </member>
        <member name="T:CSharpTest.Net.Bases.Comparable`1.EqualityComparer">
            <summary> Implements the equality comparer </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.EqualityComparer.Equals(`0,`0)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.EqualityComparer.GetHashCode(`0)">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.EqualityComparer.Compare(`0,`0)">
            <summary> Returns the comparison between the two objects </summary>
        </member>
        <member name="T:CSharpTest.Net.Bases.Disposable">
            <summary>
            Wraps the IDisposable object interface for classes that desire to be sure of being called 
            a single time for the dispose.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.#ctor">
            <summary> </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.Finalize">
            <summary> last-chance dispose </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.Dispose">
            <summary> disposes of the object if it has not already been disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.Assert">
            <summary> Raises the ObjectDisposedException if this object has already been disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.Dispose(System.Boolean)">
            <summary> Your implementation of the dispose method </summary>
        </member>
        <member name="E:CSharpTest.Net.Bases.Disposable.Disposed">
            <summary> Raised when the object is disposed </summary>
        </member>
        <member name="T:CSharpTest.Net.Cloning.MemberwiseClone">
            <summary>
            Provides a deep-copy, field-level duplication of any object
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Cloning.ObjectCloner">
            <summary>
            A class that performs duplication of an entire object graph
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ObjectCloner.#ctor">
            <summary>
            Creates the cloner
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ObjectCloner.Dispose">
            <summary>
            Disposes of the instance and it's references to objects that have been duplicated
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ObjectCloner.Clear">
            <summary>
            Removes all instances from the object graph
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ObjectCloner.Clone``1(``0)">
            <summary>
            Public entry point to begin duplication of the object graph.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ObjectCloner.CloneObject``1(``0)">
            <summary>
            Internal duplicate an object graph
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ObjectCloner.CloneDefault(System.Object)">
            <summary>
            Provides the default behavior for duplicating an object and recording the
            duplication into the graph.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Cloning.ObjectCloner.Graph">
            <summary>
            Add or Remove instances from the object graph, by adding this.Graph[o] = o; the instance 'o' will 
            not be duplicated.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.MemberwiseClone.#ctor">
            <summary>
            Provides a deep-copy, field-level duplication of any object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.MemberwiseClone.CloneDefault(System.Object)">
            <summary>
            Routine to clone an objects fields and their contents
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Cloning.ReferenceEqualityComparer">
            <summary>
            Dictionary comparer for comparing objects by reference reguardless of having
            the GetHashCode / Equals override implemented on an object.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{System#Object}#Equals(System.Object,System.Object)">
            <summary>
            Returns true if the two objects are the same instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{System#Object}#GetHashCode(System.Object)">
            <summary>
            Returns a hash code the instance of the object
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Cloning.SerializerClone">
            <summary>
            Used to duplicate objects either by the ISerializable interface or by field-level duplication.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.SerializerClone.#ctor">
            <summary>
            Used to duplicate objects either by the ISerializable interface or by field-level duplication.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.SerializerClone.Clone``1(``0)">
            <summary>
            Public entry point to begin duplication of the object graph.  If your using this instance multiple
            times you should call Clear() between the object graphs or the copies previously made will be used.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.SerializerClone.CloneDefault(System.Object)">
            <summary>
            If the object provided is [Serializable] a simulated serialization routine is used to duplicate 
            the object, if it's not serializable then the MemberwiseClone base class will perform the copy.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.DisposingList">
            <summary>
            Disposes of each element in the collection when the collection is disposed.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.DisposingList`1">
            <summary>
            Disposes of each element in the collection when the collection is disposed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList`1.#ctor">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that is empty and has the default initial capacity.
             </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that contains elements copied from the specified collection and has sufficient
                 capacity to accommodate the number of elements copied.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList`1.#ctor(System.Int32)">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that is empty and has the specified initial capacity.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList`1.Dispose">
            <summary>
            Disposes of each element in the collection when the collection is disposed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList.#ctor">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that is empty and has the default initial capacity.
             </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that contains elements copied from the specified collection and has sufficient
                 capacity to accommodate the number of elements copied.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList.#ctor(System.Int32)">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that is empty and has the specified initial capacity.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.AsymmetricKey">
            <summary>
            Provides the ability to encrypt and decrypt block-transform data
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.CryptoKey">
            <summary>
            Base class for encryption/decryption classes
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.IEncryptDecrypt">
            <summary>
            A simple interface for encrypting and decrypting strings, obtain an instance through the
            static Encryption inteface calss.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Encrypt(System.IO.Stream)">
            <summary>Encrypts a stream of data</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Decrypt(System.IO.Stream)">
            <summary> Decrypts a stream of data </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Encrypt(System.Byte[])">
            <summary>Encrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Encrypt(System.String)">
            <summary>Encrypts a string and encodes the result in base-64 encoded text</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Encrypt(System.String,CSharpTest.Net.Formatting.ByteEncoding)">
            <summary>Encrypts a string and encodes the result in specified encoding format</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Decrypt(System.Byte[])">
            <summary>Decrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Decrypt(System.String)">
            <summary>Decrypts a string from base-64 encoded text</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Decrypt(System.String,CSharpTest.Net.Formatting.ByteEncoding)">
            <summary>Decrypts a string from the specified encoding format</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.#ctor">
            <summary> </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Finalize">
            <summary> </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Assert``1(``0)">
            <summary> Throws ObjectDisposedException if the object has been disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Dispose">
            <summary> Clears any secure memory associated with this object </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Dispose(System.Boolean)">
            <summary> Clears any secure memory associated with this object </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Encrypt(System.IO.Stream)">
            <summary> Wraps the stream with a cryptographic stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Decrypt(System.IO.Stream)">
            <summary> Wraps the stream with a cryptographic stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Encrypt(System.Byte[])">
            <summary> Encrypts the given bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Decrypt(System.Byte[])">
            <summary> Decrypts the given bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Encrypt(System.String)">
            <summary>
            Encrypts the encoded text and returns the base-64 encoded result
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Encrypt(System.String,CSharpTest.Net.Formatting.ByteEncoding)">
            <summary>
            Encrypts the encoded text and returns the base-64 encoded result
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Decrypt(System.String)">
            <summary>
            Decrypts the base-64 encoded bytes, decrypts the data and returns the string
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Decrypt(System.String,CSharpTest.Net.Formatting.ByteEncoding)">
            <summary>
            Decrypts the base-64 encoded bytes, decrypts the data and returns the string
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.CryptographicException">
            <summary>
            Used to ensure generality in excpetions raised from cryptographic routines.
            </summary>
            <example>catch { throw CryptographicException(); }</example>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsymmetricKey.EncryptBlock(System.Byte[])">
            <summary>Encrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsymmetricKey.DecryptBlock(System.Byte[])">
            <summary>Decrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsymmetricKey.Encrypt(System.Byte[])">
            <summary>Encrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsymmetricKey.Decrypt(System.Byte[])">
            <summary>Decrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsymmetricKey.Encrypt(System.IO.Stream)">
            <summary> Wraps the stream with a cryptographic stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsymmetricKey.Decrypt(System.IO.Stream)">
            <summary> Wraps the stream with a cryptographic stream </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.AsymmetricKey.BlockSize">
            <summary> Provides the size, in bytes, of the maximum transform unit </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.AsymmetricKey.TransformSize">
            <summary> Proivdes the output size, in bytes, assuming an input of BlockSize </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.HashStream">
            <summary> Represents a writtable stream for computing the hash value without retaining the data </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.BaseStream">
            <summary>
            Provides a base-class for a stream object that is neither readable or writable
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BaseStream.#ctor">
            <summary> .ctor() </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary> Represents a writtable stream for computing the hash value without retaining the data </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.Close">
            <summary> Represents a writtable stream for computing the hash value without retaining the data </summary>
            <returns> The hash code computed by the series of Write(...) calls </returns>
        </member>
        <member name="P:CSharpTest.Net.Crypto.HashStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.IPasswordDerivedBytes">
            <summary>
            Provides an interface for abstracting the password derivation routine used
            for password key derivation
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IPasswordDerivedBytes.GetBytes(System.Int32)">
            <summary>
                 Returns a pseudo-random key from a password, salt and iteration count.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IPasswordDerivedBytes.Reset">
            <summary>
                 Resets the state of the operation.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.IPasswordDerivedBytes.IterationCount">
            <summary>
                 Gets or sets the number of iterations for the operation.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.IPasswordDerivedBytes.Salt">
            
            <summary>
                 Gets or sets the key salt value for the operation.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.LocalHostKey">
            <summary>
            Provides access to local machine and local user encryption via the ProtectedData class
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.LocalHostKey.WithSalt(CSharpTest.Net.Crypto.Salt)">
            <summary>
            Sets or changes the salt for this encryption key
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.LocalHostKey.CurrentUser">
            <summary>Encrypts data for the current user</summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.LocalHostKey.LocalMachine">
            <summary>Encrypts data for the this machine</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.LocalHostKey.EncryptBlock(System.Byte[])">
            <summary> Encrypts the given bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.LocalHostKey.DecryptBlock(System.Byte[])">
            <summary> Decrypts the given bytes </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.LocalHostKey.BlockSize">
            <summary> Block size </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.LocalHostKey.TransformSize">
            <summary> Output size </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.ModifiedRijndael">
            <summary>
            This class is provided to essentially unlock the Rijndael algorithm from the constraints imposed by the AES standards.
            The Rijndael algorithm here supports a wider length of key sizes and allows users to explicitly set the number of
            rounds.  This class is fully AES compliant when used with key sizes of 16, 24, or 32 bytes with rounds of 10, 12, and 
            14 respectivly.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.#ctor">
            <summary>
            Creates a ModifiedRijndael which can be used with larger key sizes and a specified number of rounds.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.Create">
            <summary> return a new instance </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.Create(System.String)">
            <summary> return a new instance or throws ArugmentException </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.GenerateKey">
            <summary>
            When overridden in a derived class, generates a random key (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/>) to use for the algorithm.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.GenerateIV">
            <summary>
            When overridden in a derived class, generates a random initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>) to use for the algorithm.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            When overridden in a derived class, creates a symmetric encryptor object with the specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/> property and initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>).
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            When overridden in a derived class, creates a symmetric decryptor object with the specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/> property and initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>).
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.ModifiedRijndael.Rounds">
            <summary>
            Gets or sets the number of rounds the encryption algorithm will use when encrypting/decrypting data.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.ModifiedRijndael.MaxRounds">
            <summary>
            Returns the Maximum value for Rounds given the current BlockSize and KeySize values
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.ModifiedRijndael.NormalRounds">
            <summary>
            Returns the AES standard round numbers for keys of 128, 192, and 256 bit, or provides a 
            rough 1/3 of MaxRounds for other key sizes based on a constant block size of 128 bit.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.PBKDF2">
            <summary>
            Provided an implementation of Rfc2898DeriveBytes accessable via the IPasswordDerivedBytes
            interface.  One primary difference in GetBytes() ensures that the number of bytes
            generated are always rounded to hash size, thus GetBytes(4) + GetBytes(4) != GetBytes(8)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.#ctor(System.Byte[],CSharpTest.Net.Crypto.Salt,System.Int32)">
            <summary>
            Constructs the Rfc2898DeriveBytes implementation.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.GetBytes(System.Int32)">
            <summary>
            Overloaded, The base implementation is broken for length > 20, further the RFC doesnt 
            support lenght > 20 and stipulates that the operation should fail.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.Dispose">
            <summary>
            Disposes of the object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.CSharpTest#Net#Crypto#IPasswordDerivedBytes#get_IterationCount">
            <summary>
            Provided an implementation of Rfc2898DeriveBytes accessable via the IPasswordDerivedBytes
            interface.  One primary difference in GetBytes() ensures that the number of bytes
            generated are always rounded to hash size, thus GetBytes(4) + GetBytes(4) != GetBytes(8)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.CSharpTest#Net#Crypto#IPasswordDerivedBytes#set_IterationCount(System.Int32)">
            <summary>
            Provided an implementation of Rfc2898DeriveBytes accessable via the IPasswordDerivedBytes
            interface.  One primary difference in GetBytes() ensures that the number of bytes
            generated are always rounded to hash size, thus GetBytes(4) + GetBytes(4) != GetBytes(8)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.CSharpTest#Net#Crypto#IPasswordDerivedBytes#get_Salt">
            <summary>
            Provided an implementation of Rfc2898DeriveBytes accessable via the IPasswordDerivedBytes
            interface.  One primary difference in GetBytes() ensures that the number of bytes
            generated are always rounded to hash size, thus GetBytes(4) + GetBytes(4) != GetBytes(8)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.CSharpTest#Net#Crypto#IPasswordDerivedBytes#set_Salt(System.Byte[])">
            <summary>
            Provided an implementation of Rfc2898DeriveBytes accessable via the IPasswordDerivedBytes
            interface.  One primary difference in GetBytes() ensures that the number of bytes
            generated are always rounded to hash size, thus GetBytes(4) + GetBytes(4) != GetBytes(8)
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.RSAPrivateKey">
            <summary>
            Provides a wrapper around encrypting/decrypting with public/private key pairs from Certificats or CSP
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.RSAPublicKey">
            <summary>
            Provides a wrapper around encrypting with public keys from Certificats or CSP
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.FromParameters(System.Security.Cryptography.RSAParameters)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.FromBytes(System.Byte[])">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.FromStore(System.String)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.FromStore(System.Security.Cryptography.CspParameters)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.FromXml(System.String)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary> Create RSAPublicKey with the provided key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary> Create RSAPublicKey with the provided key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.#ctor(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary> Create RSAPublicKey with the provided key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.Dispose(System.Boolean)">
            <summary> Clears the key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.EncryptBlock(System.Byte[])">
            <summary> Encrypts the given bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.DecryptBlock(System.Byte[])">
            <summary> Decrypts the given bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.ExportParameters">
            <summary> Returns the public/private key information </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.FromXml(System.Xml.XmlReader)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.ToXml(System.Xml.XmlWriter)">
            <summary> Returns the key information </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.ToXml">
            <summary> Returns the key information </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.ToArray">
            <summary> Returns a CspBlob standard binary key definition </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.WriteToStore(System.String)">
            <summary>
            Writes a copy of this key into the local Csp store for the current user
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.WriteToStore(System.String,System.Security.Cryptography.CspProviderFlags)">
            <summary>
            Writes a copy of this key into the local Csp store with the given options
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.DeleteFromStore">
            <summary>
            Removes the key from the Csp store if it was fetch with RSAPublicKey.FromStore(...)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.VerifyHash(System.Byte[],CSharpTest.Net.Crypto.Hash)">
            <summary>
            Signs the provided Hash code with the private key and returns the hash signature
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RSAPublicKey.RSAKey">
            <summary> Returns the key to use for encryption/decryption </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RSAPublicKey.BlockSize">
            <summary> 
            For this type of padding, block size is (key byte length - 11) 
            see http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.encrypt.aspx 
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RSAPublicKey.TransformSize">
            <summary> Output size </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RSAPublicKey.IsPrivateKey">
            <summary> Returns True if this object is also an RSAPrivateKey </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.RSAPrivateKey.DefaultKeySize">
            <summary> The default key size in bits to use when constructing a new keypair </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.RSAPrivateKey.MinKeySize">
            <summary> The minimum allowed value for an RSA key </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.RSAPrivateKey.MaxKeySize">
            <summary> The maximum allowed value for an RSA key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.FromParameters(System.Security.Cryptography.RSAParameters)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.FromBytes(System.Byte[])">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.FromXml(System.String)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.FromStore(System.String)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.FromStore(System.Security.Cryptography.CspParameters)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.#ctor">
            <summary> Create RSAPrivateKey with a new keypair of (DefaultKeySize) bit length </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.#ctor(System.Int32)">
            <param name="keySize">the bit-size of the key to generate, 384 - 16384 in increments of 8</param>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary> Create RSAPrivateKey with the provided key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary> Create RSAPrivateKey with the provided key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.#ctor(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary> Create RSAPrivateKey with the provided key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.CertToPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary> Extract private key from certificate </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.FromXml(System.Xml.XmlReader)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.ToXml(System.Xml.XmlWriter)">
            <summary> Returns the key information </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.SignHash(CSharpTest.Net.Crypto.Hash)">
            <summary>
            Signs the provided Hash code with the private key and returns the hash signature
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RSAPrivateKey.PublicKey">
            <summary>
            Returns only the public key of this public/private key pair
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.RtlProcessKey">
            <summary>
            Provides the ability to encrypt and decrypt data accessable by the current 
            process only, requires 
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.RtlProcessKey.Encryptor">
            <summary> Returns a single instance of the encryptor, it's thread-safe. </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RtlProcessKey.EncryptBlock(System.Byte[])">
            <summary> Encrypts the block of data </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RtlProcessKey.DecryptBlock(System.Byte[])">
            <summary> Decrypts the block of data </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RtlProcessKey.BlockSize">
            <summary> The size of an input block </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RtlProcessKey.TransformSize">
            <summary> The size of an output block </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.RtlProcessKey.Win32">
            <summary> Uses the same API as System.Security.SecureString </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SecureStringStream">
            <summary>
            Allows you to stream raw bytes from a secure string, use UTF16 to decode text
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.MarshallingStream">
            <summary> A stream that marshals bytes from unmanaged memory </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.MarshallingStream.#ctor(System.IntPtr,System.Boolean,System.Int32,System.Int32)">
            <summary> Constructs a stream that marshals bytes from unmanaged memory </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.MarshallingStream.#ctor(System.IntPtr,System.Boolean,System.Int32)">
            <summary> Constructs a stream that marshals bytes from unmanaged memory </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringStream.#ctor(System.Security.SecureString)">
            <summary>
            Creates a stream from the provided SecureString's contents, use UTF16 to decode text
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringStream.Dispose(System.Boolean)">
            <summary> Disposes of the decrypted string </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SecureStringUtils">
            <summary>
            Various utility methods for access to secure strings.  Lets be real about this before you
            go off, SecureString is NOT secure, it obfuscated.  If your in the process you can access 
            it's contents; however, if you looking at a crash dump or swap file then the SecureString
            provides value... just not much ;)  So these methods are actually my attempt to get people
            to USE a SecureString or similar class (i.e. Password) rather than continuing to use plain
            text strings.  Hopefully with the ease of access within the process we can provide better
            security without.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.Create(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Creates a SecureString from an enumerable set of characters, like: Create("password string");
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.Create(System.IO.Stream)">
            <summary>
            Creates a SecureString from a stream of unicode characters
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.Create(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a SecureString from an stream of characters
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.AppendAll``1(System.Security.SecureString,``0)">
            <summary>
            Adds the set of characters and makes the string readonly usage: 
            SecureString s = new SecureString().AppendAll("This is a password");
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.ToTextReader(System.Security.SecureString)">
            <summary>
            Returns a stream of Unicode bytes from the give SecureString instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.ToStream(System.Security.SecureString)">
            <summary>
            Returns a stream of Unicode bytes from the give SecureString instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.ToByteArray(System.Security.SecureString)">
            <summary>
            Converts a System.Security.SecureString into an array of bytes using System.Text.Encoding.Unicode
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.ToByteArray(System.Security.SecureString,System.Text.Encoding)">
            <summary>
            Converts a System.Security.SecureString into an array of bytes using the Encoding specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.ToCharArray(System.Security.SecureString)">
            <summary>
            Returns the secure string as an array of characters
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.CopyChars(System.Security.SecureString,System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the specified range of characters from the secure string to the output character array.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.HashDerivedBytes`1">
            <summary>
            Provided an implementation very similiar to that of the Rfc2898DeriveBytes with the following
            excpetions: 1) any hash size can be used, 2) original key bytes are always hashed, 3) bytes
            generated are always rounded to hash size, thus GetBytes(4) + GetBytes(4) != GetBytes(8)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.#ctor(`0,System.IO.Stream,CSharpTest.Net.Crypto.Salt,System.Int32)">
            <summary>
            Constructs the byte generation routine with the specified key, salt, and iteration count
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.#ctor(System.IO.Stream,CSharpTest.Net.Crypto.Salt,System.Int32)">
            <summary>
            Constructs the byte generation routine with the specified key, salt, and iteration count
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.#ctor(System.Boolean,System.Byte[],CSharpTest.Net.Crypto.Salt,System.Int32)">
            <summary>
            Constructs the byte generation routine with the specified key, salt, and iteration count
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.#ctor(System.Byte[],CSharpTest.Net.Crypto.Salt,System.Int32)">
            <summary>
            Constructs the byte generation routine with the specified key, salt, and iteration count
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.GetBytes(System.Int32)">
            <summary>
                 Returns a pseudo-random key from a password, salt and iteration count.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.Dispose">
            <summary>
            Disposes of the object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.Reset">
            <summary>
                 Resets the state of the operation.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.HashDerivedBytes`1.IterationCount">
            <summary>
                 Gets or sets the number of iterations for the operation.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.HashDerivedBytes`1.Salt">
            <summary>
                 Gets or sets the key salt value for the operation.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.UnicodeReader">
            <summary>
            Bufferless stream reader for Unicode data
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.#ctor(System.IO.Stream)">
            <summary>
            Bufferless stream reader for Unicode data
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Bufferless stream reader for Unicode data
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.Dispose(System.Boolean)">
            <summary>
            Disposes the underlying stream
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.Peek">
            <summary> Returns the next character </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.Read">
            <summary> Returns the next character </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary> Reads one character </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary> Reads one character </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.WhirlpoolManaged">
            <summary>
             The Whirlpool hashing function.
            
             References
            
             The Whirlpool algorithm was developed by Paulo S. L. M. Barreto and Vincent Rijmen.
            
             See
                  P.S.L.M. Barreto, V. Rijmen,
                  ``The Whirlpool hashing function,''
                  NESSIE submission, 2000 (tweaked version, 2001),
                  https://www.cosic.esat.kuleuven.ac.be/nessie/workshop/submissions/whirlpool.zip
             
             @author  Paulo S.L.M. Barreto
             @author  Vincent Rijmen.
            
            
             =============================================================================
            
             .Net Coversion on May 2010 by Roger O Knapp http://csharptest.net
             Performance considerations: coult be improved by moving to unmanaged/unsafe
             implementations, currently SHA512 is about 10% faster.
             The code remains, as much as was possible, exactly as it appears in the
             example 'c' implementation available from the documentation package on
             http://www.larc.usp.br/~pbarreto/WhirlpoolPage.html
            
             =============================================================================
            
             @version 3.0 (2003.03.12)
            
             =============================================================================
            
             Differences from version 2.1:
            
             - Suboptimal diffusion matrix replaced by cir(1, 1, 4, 1, 8, 5, 2, 9).
            
             =============================================================================
            
             Differences from version 2.0:
            
             - Generation of ISO/IEC 10118-3 test vectors.
             - Bug fix: nonzero carry was ignored when tallying the data length
                  (this bug apparently only manifested itself when feeding data
                  in pieces rather than in a single chunk at once).
             - Support for MS Visual C++ 64-bit integer arithmetic.
            
             Differences from version 1.0:
            
             - Original S-box replaced by the tweaked, hardware-efficient version.
            
             =============================================================================
            
             THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
             OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
             WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
             ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
             LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
             CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
             SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
             BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
             WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
             OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
             EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.Initialize">
            <summary>
            Re-initializes the hash algorithm data structures.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the provided bytes to the hash
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.HashFinal">
            <summary>
            Returns the resulting hash code
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.NESSIEinit">
            <summary>
            Initialize the hashing state.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.processBuffer">
            <summary>
             The core Whirlpool transform.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.NESSIEadd(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Delivers input data to the hashing algorithm.
            
             @param    source          plaintext data to hash.
             @param    sourcePosition  index of leftmost source u8 containing data (1 to 8 bits).
             @param    sourceLength    how many bytes of source to process.
            
             This method maintains the invariant: bufferBits &lt; DIGESTBITS
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.NESSIEfinalize(System.Byte[])">
            <summary>
             Get the hash value from the hashing state.
             
             This method uses the invariant: bufferBits &lt; DIGESTBITS
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.TimeoutAction">
            <summary>
            Provides scheduling a single-fire event at some duration into the future.  The operation is
            performed once either when the duration expires, or when this object is disposed or collected.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.#ctor(System.TimeSpan,CSharpTest.Net.Delegates.Action)">
            <summary>
            Provides scheduling a single-fire event at some duration into the future.  The operation is
            performed once either when the duration expires, or when this object is disposed or collected.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.#ctor(System.TimeSpan,CSharpTest.Net.Delegates.Action,System.Action{System.Exception})">
            <summary>
            Provides scheduling a single-fire event at some duration into the future.  The operation is
            performed once either when the duration expires, or when this object is disposed or collected.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Finalize">
            <summary> Fires if the event if needed and closes the object </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Dispose">
            <summary> Fires if the event if needed and closes the object </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Dispose(System.Boolean)">
            <summary> Fires if the event if needed and closes the object </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Start(System.TimeSpan,CSharpTest.Net.Delegates.Action)">
            <summary> Enqueues a task to be performed at some time in the future </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Start(System.TimeSpan,CSharpTest.Net.Delegates.Action,System.Action{System.Exception})">
            <summary> Enqueues a task to be performed at some time in the future </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Start``1(System.TimeSpan,System.Action{``0},``0)">
            <summary> Enqueues a task to be performed at some time in the future </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Start``1(System.TimeSpan,System.Action{``0},``0,System.Action{System.Exception})">
            <summary> Enqueues a task to be performed at some time in the future </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.ByteEncoding">
            <summary> Defines a type of formatting for encoding byte[] to a string value </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.ByteEncoding.EncodeBytes(System.Byte[])">
            <summary>Encodes a set of bytes and returns the encoded text as a string</summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.ByteEncoding.DecodeBytes(System.String)">
            <summary>Decodes the string provided and returns the original set of bytes</summary>
        </member>
        <member name="F:CSharpTest.Net.Formatting.ByteEncoding.Base64">
            <summary> Standard base-64 padded encoding using the following characters: a-z, A-Z, 0-9, +, /, = </summary>
        </member>
        <member name="F:CSharpTest.Net.Formatting.ByteEncoding.Safe64">
            <summary> A modified base-64 non-padded encoding using the following characters: a-z, A-Z, 0-9, -, _ </summary>
        </member>
        <member name="F:CSharpTest.Net.Formatting.ByteEncoding.Hex">
            <summary> The hexidecimal encoding for the bytes using the following characters: 0-9, a-f </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.Base64Stream">
            <summary> Provides reading and writing to a stream of base-64 characters. </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Base64Stream.#ctor(System.IO.Stream,System.Security.Cryptography.CryptoStreamMode)">
            <summary> Provides reading and writing to a stream of base-64 characters. </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.Base64Stream.Transform">
            <summary> Provides a crypto-transform used to read/write to a stream of base-64 characters. </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Base64Stream.Transform.#ctor(System.Security.Cryptography.CryptoStreamMode)">
            <summary> Provides a crypto-transform used to read/write to a stream of base-64 characters. </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.Safe64Stream">
            <summary> Provides reading and writing to a stream of base-64 characters while replacing '+' with '-' and '/' with '_' and ommitting padding. </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Stream.#ctor(System.IO.Stream,System.Security.Cryptography.CryptoStreamMode)">
            <summary> Provides reading and writing to a stream of base-64 characters while replacing '+' with '-' and '/' with '_' and ommitting padding. </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.Safe64Stream.Transform">
            <summary> Provides a crypto-transform used to read/write to a stream of base-64 characters while replacing '+' with '-' and '/' with '_' and ommitting padding. </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Stream.Transform.#ctor(System.Security.Cryptography.CryptoStreamMode)">
            <summary> Provides a crypto-transform used to read/write to a stream of base-64 characters while replacing '+' with '-' and '/' with '_' and ommitting padding. </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.HexEncoding">
            <summary>
            The hexidecimal encoding for the bytes using the following characters: 0-9, a-f
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.EncodeBytes(System.Byte[])">
            <summary> Transforms a sequence of characters from '0' - '9' and 'a' - 'b' in the binary values </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.EncodeBytes(System.Byte[],System.Int32,System.Int32)">
            <summary> Transforms a sequence of characters from '0' - '9' and 'a' - 'b' in the binary values </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.EncodeBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary> Transforms a sequence of characters from '0' - '9' and 'a' - 'b' in the binary values </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.DecodeBytes(System.String)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.DecodeBytes(System.String,System.Int32,System.Int32)">
            <summary> Returns the original byte array provided when the encoding was performed </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.DecodeBytes(System.Byte[])">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.DecodeBytes(System.Byte[],System.Int32,System.Int32)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.DecodeBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.Safe64Encoding">
            <summary>
            This encoding produces a 'url' safe string from bytes, similar to base64 encoding yet
            it replaces '+' with '-', '/' with '_' and omits padding.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.EncodeBytes(System.Byte[])">
            <summary> Returns a encoded string of ascii characters that are URI safe </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.EncodeBytes(System.Byte[],System.Int32,System.Int32)">
            <summary> Returns a encoded string of ascii characters that are URI safe </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.EncodeBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary> Returns a encoded string of ascii characters that are URI safe </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.DecodeBytes(System.String)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.DecodeBytes(System.String,System.Int32,System.Int32)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.DecodeBytes(System.Byte[])">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.DecodeBytes(System.Byte[],System.Int32,System.Int32)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.DecodeBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.HtmlLightDocument">
            <summary>
            Represents a loosly parsed html document
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlLightDocument">
            <summary>
            Inteded to quickly read 'mostly' well-formed html text
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlLightElement">
            <summary>
            Represents an html element
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.ROOT">
            <summary>Provides tag name assigned to the ROOT node of the heirarchy</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.TEXT">
            <summary>Provides tag name assigned to the TEXT nodes in the heirarchy</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.CDATA">
            <summary>Provides tag name assigned to the CDATA nodes in the heirarchy</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.COMMENT">
            <summary>Provides tag name assigned to comment nodes in the heirarchy</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.CONTROL">
            <summary>Provides tag name assigned to the TEXT nodes in the heirarchy</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.PROCESSING">
            <summary>Provides tag name assigned to processing instruction nodes in the heirarchy</summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.#ctor(CSharpTest.Net.Html.XmlLightElement,System.String)">
            <summary>
            Creates a new xml element
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.TagName">
            <summary> Returns the tag name of this html element </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.OpeningTagWhitespace">
            <summary> Whitespace appearing before the close of the start tag (&lt;div   &gt;) </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.OriginalTag">
            <summary> Returns the text in it's original format </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.Parent">
            <summary> Returns the parent (if any) of this html element </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.GetElementById(System.String)">
            <summary>
            Deep-scans heirarchy for the element with the provided id
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.FindElement(System.Predicate{CSharpTest.Net.Html.XmlLightElement})">
            <summary>
            Finds the elements matching the provided criteria
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.IsEmpty">
            <summary>
            Returns true if the node is self-closing (i.e. ends with '/>')
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.IsSpecialTag">
            <summary>
            Returns true if the node is not a normal element
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.Children">
            <summary> Returns the children of this html element </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.Attributes">
            <summary> Returns the attributes of this html element </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.Select(System.String)">
            <summary>
            Returns the elements from the given xpath expression
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.SelectSingleNode(System.String)">
            <summary>
            Returns the first element from the given xpath expression
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.WriteXml(System.Xml.XmlTextWriter)">
            <summary>
            Writes XML to an xml writer to ensure proper formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.WriteXml(System.IO.TextWriter)">
            <summary>
            Writes the re-constructed innerHTML in a well-formed Xml format
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.WriteUnformatted(System.IO.TextWriter)">
            <summary>
            Writes the modified document in it's original formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.CreateNavigator">
            <summary>
            Returns a new System.Xml.XPath.XPathNavigator object.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.ClosingTagWhitespace">
            <summary> Whitespace appearing before the close of the end tag (&lt;/div   &gt;) </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.Value">
            <summary> Returns the value (if any) of this html element </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.Document">
            <summary>
            Returns the root-level node
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.IsText">
            <summary>
            Returns true if the node has a textual value, i.e. text or cdata
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.IsComment">
            <summary>
            Returns true if the node is a comment
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.Namespace">
            <summary>
            Returns the namespace or empty string
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.LocalName">
            <summary>
            Returns the name without the namespace prefix
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.InnerText">
            <summary> Returns the inner text of this html element </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.NextSibling">
            <summary>
            Returns the next sibling element
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.PrevSibling">
            <summary>
            Returns the previous sibling element
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.InnerXml">
            <summary>
            Returns the re-constructed innerHTML in a well-formed Xml format
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.IXmlLightReader">
            <summary>
            Provides a means by which the XmlLightParser can inform you of the document
            elements encountered.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.StartDocument">
            <summary> Begins the processing of an xml input </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.StartTag(CSharpTest.Net.Html.XmlTagInfo)">
            <summary> Begins the processing of an xml tag </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.EndTag(CSharpTest.Net.Html.XmlTagInfo)">
            <summary> Ends the processing of an xml tag </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.AddText(System.String)">
            <summary> Encountered text or whitespace in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.AddComment(System.String)">
            <summary> Encountered comment in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.AddCData(System.String)">
            <summary> Encountered cdata section in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.AddControl(System.String)">
            <summary> Encountered control information &lt;! ... &gt; in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.AddInstruction(System.String)">
            <summary> Encountered processing instruction &lt;? ... ?&gt; in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.EndDocument">
            <summary> Ends the processing of an xml input </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightDocument._parserStack">
            <summary>
            Stores the current node stack while parsing documents
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightDocument.Root">
            <summary>
            Returns the root element
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.#ctor">
            <summary>
            Parses the document provided
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.#ctor(System.String)">
            <summary>
            Parses the document provided
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.WriteXml(System.Xml.XmlTextWriter)">
            <summary>
            Writes the re-constructed innerXML
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.WriteUnformatted(System.IO.TextWriter)">
            <summary>
            Writes the re-constructed document while attempting to preserve formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.StartDocument">
            <summary> Begins the processing of an xml input </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.StartTag(CSharpTest.Net.Html.XmlTagInfo)">
            <summary> Begins the processing of an xml tag </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.EndTag(CSharpTest.Net.Html.XmlTagInfo)">
            <summary> Ends the processing of an xml tag </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.AddText(System.String)">
            <summary> Encountered text or whitespace in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.AddComment(System.String)">
            <summary> Encountered comment in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.AddCData(System.String)">
            <summary> Encountered cdata section in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.AddControl(System.String)">
            <summary> Encountered control information &lt;! ... &gt; in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.AddInstruction(System.String)">
            <summary> Encountered processing instruction &lt;? ... ?&gt; in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.EndDocument">
            <summary> Ends the processing of an xml input </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.HtmlLightDocument._nonClosedTags">
            <summary>
            According to the Xhtml DTD these tags do not cotain anything
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.HtmlLightDocument._nonNestingTags">
            <summary>
            These tags automatically close a containing tag of the same type, 
            i.e. &lt;p>&lt;p>&lt;/p> is the same as &lt;p>&lt;/p>&lt;p>&lt;/p>
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.HtmlLightDocument._htmlHeirarchy">
            <summary>
            Strict-Heirarchy elements are elements that have a required parent type(s)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.HtmlLightDocument.#ctor">
            <summary>
            Represents a loosly parsed html document
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.HtmlLightDocument.#ctor(System.String)">
            <summary>
            Represents a loosly parsed html document
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.HtmlLightDocument.StartTag(CSharpTest.Net.Html.XmlTagInfo)">
            <summary> </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.HtmlLightDocument.EndTag(CSharpTest.Net.Html.XmlTagInfo)">
            <summary> </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.HtmlLightDocument.EndDocument">
            <summary> Ends the processing of an xml input </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlLightAttributes">
            <summary>
            A collection of attributes for an element
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttributes.ContainsKey(System.String)">
            <summary> Returns true if hte attribute is defined </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttributes.Add(System.String,System.String)">
            <summary>
            Adds a new attribute to the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttributes.Remove(System.String)">
            <summary>
            Removes an item from the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttributes.ToArray">
            <summary>
            Returns the attributes as a collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttributes.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightAttributes.Count">
            <summary>
            Returns the number of items in the collection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightAttributes.Item(System.String)">
            <summary>
            Gets or Sets the attribute's unencoded text value
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightAttributes.Keys">
            <summary>
            Returns the names of the attributes in appearance order
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XhtmlDTDSpecification">
            <summary>
            Defines the required DTD specification
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XhtmlDTDSpecification.None">
            <summary> Use DTD only if defined </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XhtmlDTDSpecification.XhtmlStrict_10">
            <summary> 
            Use the XHTML 1.0 Transitional DTD 
            &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XhtmlDTDSpecification.XhtmlTransitional_10">
            <summary> 
            Use the XHTML 1.0 Transitional DTD 
            &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XhtmlDTDSpecification.XhtmlFrameset_10">
            <summary> 
            Use the XHTML 1.0 Transitional DTD 
            &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XhtmlDTDSpecification.Any">
            <summary> 
            Allow any of the supported DTDs, but must be declared and compliant 
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XhtmlValidation">
            <summary>
            Provides validation of Xhtml documents based on w3c DTDs
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XhtmlValidation.#ctor">
            <summary> Creates a validator that requires documents to use any of the three DTD specifications </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XhtmlValidation.#ctor(CSharpTest.Net.Html.XhtmlDTDSpecification)">
            <summary> Creates a validator that requires documents to use the specified DTD </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XhtmlValidation.Validate(System.String,System.IO.TextReader)">
            <summary> Validate the input textreader </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XhtmlValidation.Validate(System.IO.TextReader)">
            <summary> Validate the input textreader </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XhtmlValidation.Validate(System.String)">
            <summary> Validate the input filename </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlQuoteStyle">
            <summary> The quote used with an attribute value </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlQuoteStyle.None">
            <summary> The value was not defined, no '=' sign </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlQuoteStyle.Missing">
            <summary> The value was not quoted, name=value </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlQuoteStyle.Single">
            <summary> The value was not quoted, name='value' </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlQuoteStyle.Double">
            <summary> The value was not quoted, name="value" </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlLightAttribute">
            <summary>
            Represents a single attribute on an xml element
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightAttribute.EmptyList">
            <summary> A static empty list of attributes </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttribute.#ctor(System.String)">
            <summary> XmlLightAttribute </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightAttribute.Ordinal">
            <summary> The offset of the attribute in the list </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightAttribute.Name">
            <summary> The full name of the attribute </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightAttribute.Value">
            <summary> The original encoded text value of the attribute </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightAttribute.Quote">
            <summary> The character used to quote the original value </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightAttribute.Before">
            <summary> The white-space characters preceeding the attribute name </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlTagInfo">
            <summary>
            Wraps up the information about a tag start while parsing
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlTagInfo.#ctor(System.String,System.Boolean)">
            <summary> XmlTagInfo </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlTagInfo.FullName">
            <summary>The full name token of the element 'ns:name'</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlTagInfo.SelfClosed">
            <summary> True if the tag is self-closing/empty: &lt;empty/&gt; </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlTagInfo.EndingWhitespace">
            <summary> THe space preceeding the tag close '>'</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlTagInfo.UnparsedTag">
            <summary> The complete tag in raw/unparsed form </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlTagInfo.Attributes">
            <summary> The name/value pair attributes </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlLightParser">
            <summary>
            Provides a means by which you can cursur through xml/html documents and be notified for each tag/text/etc
            via implementing the IXmlLightReader interface.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightParser.XmlElementParsing">
            <summary>
            Provides a regular expression to match xml/html tags, comments, cdata, etc
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightParser.HtmlElementParsing">
            <summary>
            Provides a regular expression to match xml/html tags, comments, cdata, etc
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightParser.HtmlAttributeParsing">
            <summary>
            Provides a regular expression to match xml/html attribute name/value pairs
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightParser.Parse(System.String,CSharpTest.Net.Html.IXmlLightReader)">
            <summary>
            Parses the provided xml/html document into discrete components and provides the
            information to the provided reader, see XmlLightDocument
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightParser.Parse(System.String,CSharpTest.Net.Html.XmlLightParser.AttributeFormat,CSharpTest.Net.Html.IXmlLightReader)">
            <summary>
            Parses the provided xml/html document into discrete components and provides the
            information to the provided reader, see XmlLightDocument
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightParser.Parse(System.String,System.Text.RegularExpressions.Regex,CSharpTest.Net.Html.IXmlLightReader)">
            <summary>
            Parses the provided document into discrete components using the regex provided and 
            provides the information to the provided reader, see XmlLightDocument
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightParser.ParseAttributes(System.String)">
            <summary>
            Returns an enumeration of attribute name/value pairs from within an element:
            &lt;elem attr="value"&gt;
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightParser.ParseText(System.String)">
            <summary>
            Returns an enumeration of attribute name/value pairs from within an element:
            &lt;elem attr="value"&gt;
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlLightParser.AttributeFormat">
            <summary> Determines how strict attributes are treated durring parsing </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightParser.AttributeFormat.Html">
            <summary> allows non-value and unquoted attributes </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightParser.AttributeFormat.Xml">
            <summary> requires attributes to have quoted values </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.ICloneable`1">
            <summary>
            Provides a strongly typed shallow copy of the current object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.ICloneable`1.Clone">
            <summary>
            Returns a shallow clone of this object.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.IReadOnlyCollection`1">
            <summary>
            Provides common interface members for the implementation of a Set
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IReadOnlyCollection`1.IndexOf(`0)">
            <summary> Returns the zero-based index of the item or -1 </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IReadOnlyCollection`1.Contains(`0)">
            <summary> Returns true if the item is already in the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IReadOnlyCollection`1.ToArray">
            <summary> Returns this collection as an array </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.IReadOnlyCollection`1.Item(System.Int32)">
            <summary> Access an item by it's ordinal offset in the list </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.OrdinalList">
            <summary>
            An ordinal list is a list optimized to store lists of integer data that can then be manipulated 
            as a set with intersect/union etc.  Each integer stored is translated to a bit offset and thus
            cann't be stored more than once or in any particular order.  Note: adding the value int.Max will 
            allocate int.Max/8 bytes of memory, so this is best used with ordinal indexes into a list that 
            is smaller than 8,388,608 (one megabyte of bits).  Pre-allocate with Ceiling = max for better
            performance, or add the integers in reverse order (highest to lowest).
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.#ctor">
            <summary> Constructs an empty OrdinalList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.#ctor(System.Byte[])">
            <summary> Constructs an OrdinalList from a set of bits represeting the ordinals </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary> Constructs an OrdinalList from the integer ordinals provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Clear">
            <summary> Empty the OrdinalList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary> Adds a range of integer ordinals into the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Add(System.Int32)">
            <summary> Adds an integer ordinal into the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Remove(System.Int32)">
            <summary> Removes an ordinal from the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Contains(System.Int32)">
            <summary> Returns true if the ordinal is in the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.CopyTo(System.Int32[],System.Int32)">
            <summary> Extracts the ordinals into an array </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.ToArray">
            <summary> Returns the array of ordinals that have been added. </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.ToByteArray">
            <summary> Returns the complete set of raw bytes for storage and reconstitution </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.IntersectWith(CSharpTest.Net.Collections.OrdinalList)">
            <summary> Returns the set of items that are in both this set and the provided set </summary>
            <example>{ 1, 2, 3 }.IntersectWith({ 2, 3, 4 }) == { 2, 3 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.UnionWith(CSharpTest.Net.Collections.OrdinalList)">
            <summary> Returns the set of items that are in either this set or the provided set </summary>
            <example>{ 1, 2, 3 }.UnionWith({ 2, 3, 4 }) == { 1, 2, 3, 4 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.GetEnumerator">
            <summary> Returns an enumeration of the ordinal values </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrdinalList.Count">
            <summary> Semi-expensive, returns the count of ordinals in the collection </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrdinalList.Ceiling">
            <summary> 
            Gets or sets the maximum inclusive ordinal that can be stored in the memory currently
            allocated, ranges from -1 to int.MaxValue
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrdinalList.IsReadOnly">
            <summary> Returns false </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.ReadOnlyList`1">
            <summary> A readonly list of T </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary> Creates a readonly list of T by copying the enumeration into a List&lt;T> </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary> Creates a readonly list of T by copying the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0},System.Boolean)">
            <summary> Creates a readonly list of T creating a copy if desired </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the item or -1 if not found.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.Contains(`0)">
            <summary>
            Returns true if the list contains the specified element.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.ToArray">
            <summary>
            Returns the collection as an array
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.GetEnumerator">
            <summary>
            Returns an enumeration of the elements in the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the elements in the collection to the specified array
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.Clone">
            <summary> Returns a shallow clone of this object </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Returns the element at the given offset
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.ReadOnlyList`1.Count">
            <summary>
            Returns the count of items contained in the collection
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.SetList`1">
            <summary> Represents an immutable collection of unique items that can be manipulated as a set, intersect/union/etc. </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Int32)">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.IComparer{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IndexOf(`0)">
            <summary> Returns the zero-based index of the item or -1 </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Contains(`0)">
            <summary> Returns true if the item is already in the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.CopyTo(`0[],System.Int32)">
            <summary> Copy the collection to an array </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.ToArray">
            <summary> Returns this collection as an array </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Clear">
            <summary> Removes all items from the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Add(`0)">
            <summary> Returns a new collection adding the item provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Add(`0,System.Int32@)">
            <summary> Returns a new collection adding the item provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary> Adds a range of items to the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Replace(`0)">
            <summary> Adds or replaces an item in the collection, returns true if an entry was replaced </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary> Adds or replaces an item in the collection, returns true if any item was replaced </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary> Not supported, the list is sorted. </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Remove(`0)">
            <summary> Returns a new collection with the item provided removed </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.RemoveAt(System.Int32)">
            <summary> Removes an item by it's ordinal index in the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary> Removes the items in this set that are not in the provided set </summary>
            <example>{ 1, 2, 3 }.RemoveAll({ 2, 3, 4 }) == { 1 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IntersectWith(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the set of items that are in both this set and the provided set </summary>
            <example>{ 1, 2, 3 }.IntersectWith({ 2, 3, 4 }) == { 2, 3 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.UnionWith(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the set of items that are in either this set or the provided set </summary>
            <example>{ 1, 2, 3 }.UnionWith({ 2, 3, 4 }) == { 1, 2, 3, 4 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.ComplementOf(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the items in the provided set that are not in this set </summary>
            <example>{ 1, 2, 3 }.ComplementOf({ 2, 3, 4 }) == { 4 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.SubtractSet(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the items in this set that are not in the provided set </summary>
            <example>{ 1, 2, 3 }.RemoveAll({ 2, 3, 4 }) == { 1 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.ExclusiveOrWith(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the items in this set that are not in the provided set </summary>
            <example>{ 1, 2, 3 }.ExclusiveOrWith({ 2, 3, 4 }) == { 1, 4 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IsEqualTo(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns true if all items in this set are also in the provided set </summary>
            <example>{ 1, 2 }.IsEqualTo({ 1, 2 }) == true &amp;&amp; {}.IsEqualTo({}) == true</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IsSubsetOf(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns true if all items in this set are also in the provided set </summary>
            <example>{ 1, 2, 4 }.IsSubsetOf({ 1, 2, 3, 4 }) == true &amp;&amp; {}.IsSubsetOf({ 1 }) == true</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IsSupersetOf(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns true if all items in the provided set are also in this set </summary>
            <example>{ 1, 2, 3, 4 }.IsSupersetOf({ 1, 2, 4 }) == true &amp;&amp; { 1 }.IsSupersetOf({}) == true</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary> Copies collection to array </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary> Returns an enumerator </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.GetEnumerator">
            <summary> Returns a typed enumerator </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Clone">
            <summary> Returns a shallow clone of this object </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.EmptySet">
            <summary> Provides an empty set </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.Item(System.Int32)">
            <summary> Access an item by it's ordinal offset in the list </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.IsReadOnly">
            <summary> Returns true if the list is read-only </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.Count">
            <summary> Returns the count of items in the list </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.System#Collections#ICollection#IsSynchronized">
            <summary> Returns false </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.System#Collections#ICollection#SyncRoot">
            <summary> Returns SyncRoot </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.DisplayInfoBase.ChangeType(System.Object,System.Type,System.Boolean,System.Object)">
            <summary> Provides the standard type cohersion between types </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.IArgument">
            <summary>
            Represents a static or instance method that will be invoked as a command
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.IDisplayInfo">
            <summary> A base interface that provides name and display information </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.IDisplayInfo.Help">
            <summary> Renders the help information to Console.Out </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IDisplayInfo.DisplayName">
            <summary> Returns the display name of the item </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IDisplayInfo.AllNames">
            <summary> Returns the name of the item </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IDisplayInfo.Category">
            <summary> Returns the category if defined, or the type name if not </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IDisplayInfo.Description">
            <summary> Returns the description of the item </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IDisplayInfo.Visible">
            <summary> Returns true if the items should be displayed. </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IArgument.Required">
            <summary> Returns true if the argument is required </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IArgument.DefaultValue">
            <summary> Returns the default value if Required == false </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IArgument.Type">
            <summary> Returns the type of the argument </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.AliasNameAttribute">
            <summary>
            Defines an alias name for a command
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.AliasNameAttribute.#ctor(System.String)">
            <summary> Constructs an AliasNameAttribute </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.AliasNameAttribute.Name">
            <summary> Returns the name of the alias </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.IgnoreMemberAttribute">
            <summary>
            Instructs the CommandInterpreter to ignore a specific method/property
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.IgnoreMemberAttribute.#ctor">
            <summary> Constructs an IgnoreMemberAttribute </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.AllArgumentsAttribute">
            <summary>
            Defines that the string[] argument accepts all arguments provided to the command, useage:
            <code>void MyCommand([AllArguments] string[] arguments)</code>
            or 
            <code>void MyCommand([AllArguments] string[] arguments, ICommandInterpreter ci)</code>
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.AllArgumentsAttribute.#ctor">
            <summary> Constructs an AllArgumentsAttribute </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.DisplayInfoAttribute">
            <summary>
            Provides all the display properties.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.DisplayInfoAttribute.#ctor(System.String,System.String[])">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAttribute.DisplayName">
            <summary> Returns the DisplayName </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAttribute.AliasNames">
            <summary> Just the alias names </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAttribute.AllNames">
            <summary> Returns the name list </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAttribute.Category">
            <summary> Returns the Category </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAttribute.Description">
            <summary> Returns the Description </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAttribute.Visible">
            <summary> Returns the visibility of the command </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.DisplayInfoAndValueAttribute">
            <summary> Contains display info and a default value </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.DisplayInfoAndValueAttribute.#ctor(System.String,System.String[])">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAndValueAttribute.DefaultValue">
            <summary> Gets/sets the default value for the option </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAndValueAttribute.HasDefault">
            <summary> Returns true if a default value was specified </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.CommandFilterAttribute">
            <summary>
            Provides all the properties available for a command 'filter' that is
            called for every command invoked enabling custom processing of arguments
            and pre/post processing.  The attribute is optional, the format of the
            the method prototype is not and must be:
            <code>void (ICommandInterpreter interpreter, ICommandChain chain, string[] arguments);</code>
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandFilterAttribute.#ctor(System.Char)">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandFilterAttribute.#ctor(System.Char[])">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandFilterAttribute.Keys">
            <summary> Returns the keys associated with this filter </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandFilterAttribute.Visible">
            <summary> Ignored. </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.CommandAttribute">
            <summary>
            Provides all the properties available for a command.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandAttribute.#ctor">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandAttribute.#ctor(System.String)">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandAttribute.#ctor(System.String,System.String[])">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.ArgumentAttribute">
            <summary>
            Provides all the properties available for an argument.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ArgumentAttribute.#ctor">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ArgumentAttribute.#ctor(System.String)">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ArgumentAttribute.#ctor(System.String,System.String[])">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.OptionAttribute">
            <summary>
            Provides all the properties available for an argument.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.OptionAttribute.#ctor">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.OptionAttribute.#ctor(System.String)">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.OptionAttribute.#ctor(System.String,System.String[])">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.ICommand">
            <summary>
            Represents a static or instance method that will be invoked as a command
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommand.Run(CSharpTest.Net.Commands.ICommandInterpreter,System.String[])">
            <summary> Runs this command with the supplied arguments </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommand.Arguments">
            <summary> Returns the arguments defined on this command. </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.ICommandFilter">
            <summary>
            Represents a static or instance method that is used to filter or pre/post process commands
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandFilter.Run(CSharpTest.Net.Commands.ICommandInterpreter,CSharpTest.Net.Commands.ICommandChain,System.String[])">
            <summary>
            Used to run a command through a set of filters, call chain.Next() to continue processing
            </summary>
            <param name="interpreter">The command interpreter running the command</param>
            <param name="chain">The next link in the chain of filters</param>
            <param name="arguments">The input arguments to the command-line</param>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommandFilter.Keys">
            <summary> Returns the possible character keys for this filter when setting the precedence </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandFilter.Keys">
            <summary> Returns the possible character keys for this filter when setting the precedence </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.ICommandChain">
            <summary>
            Defines an interface that allows a command filter to call to next filter in the chain
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandChain.Next(System.String[])">
            <summary>
            Calls the next command filter in the chain, eventually processing the command
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.CommandInterpreter">
            <summary>
            The primary class involved in providing a command-line interpreter.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.ICommandInterpreter">
            <summary>
            Defines the interface for the command interpreter.  If you use this as a parameter
            it will be provided auto-magically to your command.  To avoid conflicts with ordinal
            argument matching, make this your last argument. 
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandInterpreter.Get(System.String)">
            <summary> 
            Command to get an option value by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandInterpreter.Set(System.String,System.Object)">
            <summary> 
            Command to set the value of an option value by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandInterpreter.Run(System.String[])">
            <summary> 
            Run the command whos name is the first argument with the remaining arguments provided to the command
            as needed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandInterpreter.Run(System.IO.TextReader)">
            <summary>
            Runs each line from the reader until EOF, can be used with Console.In
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandInterpreter.ExpandOptions(System.String)">
            <summary>
            Expands '$(OptionName)' within the input string to the named option's value.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommandInterpreter.ErrorLevel">
            <summary> 
            Gets/sets the exit code of the operation/process
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommandInterpreter.Prompt">
            <summary> 
            Gets/sets the prompt, use "$(OptionName)" to reference options
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommandInterpreter.Commands">
            <summary>
            Lists all the commands that have been added to the interpreter
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommandInterpreter.Options">
            <summary>
            Lists all the options that have been added to the interpreter, use the set/get commands
            to modify their values.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommandInterpreter.ReadNextCharacter">
            <summary>
            Reads a keystroke, not from the std:in stream, rather from the console or ui.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.#ctor(System.Object[])">
            <summary>
            Constructs a command-line interpreter from the objects and/or System.Types provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.#ctor(CSharpTest.Net.Commands.DefaultCommands,System.Object[])">
            <summary>
            Constructs a command-line interpreter from the objects and/or System.Types provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.AddHandler(System.Type)">
            <summary>
            Adds the static methods to the command list, and static properties to the list of
            global options (used with commands set/get)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.AddHandler``1(``0)">
            <summary>
            Adds the instance methods to the command list, and instance properties to the list of
            global options (used with commands set/get)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.AddCommand(CSharpTest.Net.Commands.ICommand)">
            <summary> Manually adds a command </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.RemoveCommand(CSharpTest.Net.Commands.ICommand)">
            <summary> Manually remove a command </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.AddFilter(CSharpTest.Net.Commands.ICommandFilter)">
            <summary>
            Adds a command 'filter' that is called for every command invoked enabling custom processing 
            of arguments and pre/post processing.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.AddOption(CSharpTest.Net.Commands.IOption)">
            <summary> Manually adds an option </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Get(System.String)">
            <summary> Command to get an option value </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Set(System.String,System.Object)">
            <summary> Command to set the value of an option </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Set(System.String,System.Object,System.Boolean)">
            <summary> Command to set the value of an option </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.ProcessCommand(System.String[])">
            <summary>
            The last link in the command chain
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.OnError(System.Exception)">
            <summary> called to handle error events durring processing </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.GetHead">
            <summary> returns the chained filters </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.PrecedenceOrder(CSharpTest.Net.Commands.ICommandFilter,CSharpTest.Net.Commands.ICommandFilter)">
            <summary> Compares the command filters in order of precendence </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Run(System.String[])">
            <summary> 
            Run the command whos name is the first argument with the remaining arguments provided to the command
            as needed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Run(System.IO.TextReader)">
            <summary>
            Runs each line from the reader until EOF, can be used with Console.In
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.ExpandOptions(System.String)">
            <summary>
            Expands '$(OptionName)' within the input string to the named option's value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.GetNextCharacter">
            <summary> Default inplementation of get keystroke </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Help(System.String)">
            <summary> Display the Help text to Console.Out </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.ErrorLevel">
            <summary> Gets/sets the exit code of the operation/process </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.Prompt">
            <summary> Gets/sets the prompt, use "$(OptionName)" to reference options </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.Commands">
            <summary>
            Lists all the commands that have been added to the interpreter
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.Options">
            <summary>
            Lists all the options that have been added to the interpreter, use the set/get commands
            to modify their values.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.Filters">
            <summary> Lists all the filters that have been added to the interpreter </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.FilterPrecedence">
            <summary> Defines the filter precedence by appearance order of key character </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.ReadNextCharacter">
            <summary>
            Reads a keystroke, not from the std:in stream, rather from the console or ui.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.DefaultCommands">
            <summary>
            A list of built-in commands that can be added to the interpreter
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.None">
            <summary> Not a command, indicates no default commands </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Default">
            <summary> Not a command, indicates the default commands added if not specified </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.All">
            <summary> Not a command, indicates to use all default commands </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Get">
            <summary> A command to get the value of an option </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Set">
            <summary> A command to set the value of an option </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Help">
            <summary> A command to display help about the commands and their options </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.ErrorLevel">
            <summary> An option to set and get the environment error-level </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Prompt">
            <summary> An option that provides customization of the command prompt for interactive mode </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Echo">
            <summary> A command to echo back to std::out the arguments provided. </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.More">
            <summary> A command to read the input stream and show one screen at a time to standard output. </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Find">
            <summary> A command to search for a text string in a file or the standard input stream. </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.PipeCommands">
            <summary> A command filter that allows piping the output of one command into the input of another. </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.IORedirect">
            <summary> A command filter that allows redirect of std in/out to files. </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.InterpreterException">
            <summary>
            Base exception for assertions and errors encountered while processing commands
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.InterpreterException.#ctor(System.String,System.Object[])">
            <summary>
            Constructs an exception
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.InterpreterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs an exception durring deserialization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.InterpreterException.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts the condition and throws on failure
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.IOption">
            <summary>
            Defines an Option that can be configued/set independantly of the commands.  Used with the set/get
            commands defined by the interpreter.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IOption.Value">
            <summary>
            Gets/sets the value of the option
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IOption.Type">
            <summary> Returns the type of the option value </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.ReadNextCharacter">
            <summary>
            Used for obtaining input directly from user rather than from the std:in stream
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.AESCryptoKey">
            <summary>
            Provides AES-256 bit encryption using a global IV (Init vector) based on the current process' entry
            assembly.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.DefaultIV">
            <summary> Creates a default IV for the crypto provider if AESCryptoKey.CryptoIV is not set </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.#ctor">
            <summary> Creates a new key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.#ctor(System.Byte[])">
            <summary> Creates an object representing the specified key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.#ctor(System.Byte[],System.Byte[])">
            <summary> Creates an object representing the specified key and init vector </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.Dispose(System.Boolean)">
            <summary> Disposes of the key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.Encrypt(System.IO.Stream)">
            <summary>Encrypts a stream of data</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.Decrypt(System.IO.Stream)">
            <summary> Decrypts a stream of data </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.Encrypt(System.Byte[])">
            <summary>Encrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.Decrypt(System.Byte[])">
            <summary>Decrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.AESCryptoKey.Algorithm">
            <summary> Returns the algorithm key or throws ObjectDisposedException </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.AESCryptoKey.Key">
            <summary> Returns the AES 256 bit key this object was created with </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.AESCryptoKey.IV">
            <summary> Returns the AES 256 bit key this object was created with </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.AsciiEncoder">
            <summary> This class has been moved to CSharpTest.Net.Formatting.Safe64Encoding </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsciiEncoder.DecodeBytes(System.String)">
            <summary> Returns the original byte array provided when the encoding was performed </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsciiEncoder.DecodeBytes(System.Byte[])">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsciiEncoder.EncodeBytes(System.Byte[])">
            <summary> Returns a encoded string of ascii characters that are URI safe </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.Encryption">
            <summary>
            Maintains backwards compatibility for access to the encryption api
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Encryption.CurrentUser">
            <summary>Encrypts data for the current user</summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Encryption.LocalMachine">
            <summary>Encrypts data for the this machine</summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Encryption.Passthrough">
            <summary>Implements the encryption api but does not change any data</summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.Hash">
            <summary> Represents a comparable, sortable, hash code </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.MD5(System.Byte[])">
            <summary> Computes an MD5 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.MD5(System.IO.Stream)">
            <summary> Computes an MD5 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA1(System.Byte[])">
            <summary> Computes an SHA1 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA1(System.IO.Stream)">
            <summary> Computes an SHA1 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA256(System.Byte[])">
            <summary> Computes an SHA256 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA256(System.IO.Stream)">
            <summary> Computes an SHA256 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA384(System.Byte[])">
            <summary> Computes an SHA384 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA384(System.IO.Stream)">
            <summary> Computes an SHA384 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA512(System.Byte[])">
            <summary> Computes an SHA512 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA512(System.IO.Stream)">
            <summary> Computes an SHA512 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.FromBytes(System.Byte[])">
            <summary> Creates a comparable Hash object from the given hashcode bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.FromString(System.String)">
            <summary> Creates a comparable Hash object from the base-64 encoded hashcode bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.ToArray">
            <summary> Returns a copy of the hash code bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.ToString">
            <summary> Returns the hash code as a base-64 encoded string </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.CompareTo(CSharpTest.Net.Crypto.Hash)">
            <summary> Compares the hash codes and returns the result </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Hash.AlgorithmOID">
            <summary> Returns the OID of the hash algorithm </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Hash.AlgorithmName">
            <summary> Returns the name of the hash algorithm </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Hash.Length">
            <summary> Returns the length in bytes of the hash code </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Hash.HashCode">
            <summary> Returns a hash of the hash code :) </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.Password">
            <summary>
            Stores an encrypted version of the supplied password in memory so that it
            can be provided as clear-text to external systems.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.PasswordKey">
            <summary>
            Creates an in-memory object that can be used for salted password encryption without
            storing the password in memory (based on Rfc2898DeriveBytes, SHA1 hash of password
            is stored)
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.PasswordKey.DefaultIterations">
            <summary> Adjusts the number of repetitions used when deriving password bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.#ctor(CSharpTest.Net.Crypto.IPasswordDerivedBytes,CSharpTest.Net.Crypto.Salt)">
            <summary> Creates the password from the given bytes and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.#ctor(System.Boolean,System.Byte[],CSharpTest.Net.Crypto.Salt)">
            <summary> Creates the password from the given bytes and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.#ctor(System.Boolean,System.Byte[])">
            <summary> Creates the password from the given password bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.#ctor(System.String)">
            <summary> Creates the password from the given password </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.#ctor(System.Security.SecureString)">
            <summary> Creates the password from the given password </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Dispose(System.Boolean)">
            <summary> Removes the memory representation of this password and key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.CreateKey">
            <summary> Returns the key generated with the current password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.CreateKey(CSharpTest.Net.Crypto.Salt)">
            <summary> Returns the key generated with the current password and the provided salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Encrypt(System.IO.Stream)">
            <summary> Encrypts the stream with the current password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Decrypt(System.IO.Stream)">
            <summary> Decrypts the stream with the current password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Decrypt(System.IO.Stream,CSharpTest.Net.Crypto.Salt.Size)">
            <summary> Decrypts the stream with the current password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Encrypt(System.Byte[])">
            <summary> Encrypts the bytes with the current password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Decrypt(System.Byte[])">
            <summary> Decrypts the bytes with the current password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Decrypt(System.Byte[],CSharpTest.Net.Crypto.Salt.Size)">
            <summary> Decrypts the bytes with the current password and salt </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordKey.DerivedBytes">
            <summary>
            Returns the derived bytes algorithm for this instance or throws ObjectDisposedException
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordKey.Salt">
            <summary> Sets or Gets the salt used with deriving the encryption key </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordKey.IterationCount">
            <summary> Sets or Gets the iterations used with deriving the encryption key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.#ctor(System.Boolean,System.Byte[])">
            <summary> Creates the password from the given bytes and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.#ctor(System.String)">
            <summary> Creates the password from the given data and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.#ctor(System.Security.SecureString)">
            <summary> Creates the password from the given data and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.Dispose(System.Boolean)">
            <summary> Removes the memory representation of this password and key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.CreateHash">
            <summary> Returns a salted hash for the password </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.CreateHash(CSharpTest.Net.Crypto.Salt)">
            <summary> Returns a salted hash for the password </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.ReadBytes">
            <summary> Returns a stream from which the password can be read </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.ReadText">
            <summary> Returns a stream from which the password can be read </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.ToSecureString">
            <summary> Returns a System.Security.SecureString from the password </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.Equals(System.Object)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.Equals(CSharpTest.Net.Crypto.Password)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.GetHashCode">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.Equals(CSharpTest.Net.Crypto.Password,CSharpTest.Net.Crypto.Password)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.GetHashCode(CSharpTest.Net.Crypto.Password)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.op_Equality(CSharpTest.Net.Crypto.Password,CSharpTest.Net.Crypto.Password)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.op_Inequality(CSharpTest.Net.Crypto.Password,CSharpTest.Net.Crypto.Password)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Password.Comparer">
            <summary> return a non-reference equality comparer for this class </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Password.Encoding">
            <summary> Returns the encoding used for passwords </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Password.Passkey">
            <summary>
            Allows overriding the encryption/decryption support for the in-memory password
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.Password.EqualityComparer">
            <summary> Implements the equality comparer </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.EqualityComparer.Equals(CSharpTest.Net.Crypto.Password,CSharpTest.Net.Crypto.Password)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.EqualityComparer.GetHashCode(CSharpTest.Net.Crypto.Password)">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.PasswordHash">
            <summary> Creates a salted hash </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.PasswordHash.StandardIterations">
            <summary> Defines the derived hash iteration count used </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.FromString(System.String)">
            <summary> recreates a hash from a base-64 encoded string </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.FromBytes(System.Byte[])">
            <summary> recreates a hash from the bytes returned by ToArray() </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(CSharpTest.Net.Crypto.SaltedData)">
            <summary> Recreates a hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.IO.Stream,CSharpTest.Net.Crypto.Salt)">
            <summary> Creates a salted hash from the given bytes and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(CSharpTest.Net.Crypto.Password)">
            <summary> Creates a salted hash from the given password </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(CSharpTest.Net.Crypto.Password,CSharpTest.Net.Crypto.Salt)">
            <summary> Creates a salted hash from the given password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.Boolean,System.Byte[],CSharpTest.Net.Crypto.Salt)">
            <summary> Creates the hash from the given bytes and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.Boolean,System.Byte[])">
            <summary> Creates the hash from the given bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.String,CSharpTest.Net.Crypto.Salt)">
            <summary> Creates the hash from the given data and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.String)">
            <summary> Creates the hash from the given data and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.Security.SecureString,CSharpTest.Net.Crypto.Salt)">
            <summary> Creates the hash from the given data and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.Security.SecureString)">
            <summary> Creates the hash from the given data and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.Dispose">
            <summary> Disposes of hash bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.CompareTo(CSharpTest.Net.Crypto.PasswordHash)">
            <summary> Compares the hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.ToArray">
            <summary> returns the salted-hash bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.VerifyPassword(CSharpTest.Net.Crypto.Password)">
            <summary> Returns true if the provided password matches this hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.VerifyPassword(System.IO.Stream)">
            <summary> Returns true if the provided password matches this hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.VerifyPassword(System.Byte[])">
            <summary> Returns true if the provided password matches this hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.VerifyPassword(System.String)">
            <summary> Returns true if the provided password matches this hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.ToString">
            <summary> Returns the hash as a base-64 encoded string </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordHash.HashCode">
            <summary> Gets the hash </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordHash.Length">
            <summary> returns the salted-hash length in bytes </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordHash.Salt">
            <summary> returns the salt used to create this hash </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.BinaryComparer">
            <summary>
            Dictionary comparer for comparing arrays of bytes by value equality
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.BinaryComparer.Equals(System.Byte[],System.Byte[])">
            <summary> returns true if both arrays contain the exact same set of bytes. </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.BinaryComparer.Compare(System.Byte[],System.Byte[])">
            <summary> Compares the contents of the byte arrays and returns the result. </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.BinaryComparer.GetHashCode(System.Byte[])">
            <summary> Returns a hash code the instance of the object </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.BinaryComparer.System#Collections#Generic#IComparer{System#Byte[]}#Compare(System.Byte[],System.Byte[])">
            <summary> Compares the contents of the byte arrays and returns the result. </summary> 
        </member>
        <member name="M:CSharpTest.Net.Crypto.BinaryComparer.System#Collections#Generic#IEqualityComparer{System#Byte[]}#Equals(System.Byte[],System.Byte[])">
            <summary> Returns true if the two objects are the same instance </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.BinaryComparer.System#Collections#Generic#IEqualityComparer{System#Byte[]}#GetHashCode(System.Byte[])">
            <summary> Returns a hash code the instance of the object </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.Salt">
            <summary>
            Represents a random sequence of bytes used to combine with hash and encryption
            values to provide an extra level of security.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Salt.DefaultSize">
            <summary> The size of the salt if unspecified </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.#ctor">
            <summary> Creates a new Salt of DefaultSize </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.#ctor(CSharpTest.Net.Crypto.Salt.Size)">
            <summary> Creates a new Salt of the specified size</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.#ctor(System.Byte[],System.Boolean)">
            <summary> Creates a new Salt using the specified bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.FromBytes(System.Byte[])">
            <summary> Creates salt from the provided bytes or a hash of the bytes </summary>
            <param name="bytes">An array of random bytes of 8, 16, 32, or 64 bytes long </param>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.ToArray">
            <summary> Returns the salt as an array of bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.ToString">
            <summary> Returns the base64 encoding of the salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.FromString(System.String)">
            <summary>
            Recreates a salt value from a string
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.CopyTo(System.Byte[],System.Int32)">
            <summary> Copy the salt to the specified offset in the byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.ToStream">
            <summary> Returns the salt as a stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.GetData(System.Byte[])">
            <summary> Returns the salt combined with a copy of the speicified data </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.GetData(System.IO.Stream)">
            <summary> Returns the salt combined with a copy of the speicified data as a stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.CreateBytes(CSharpTest.Net.Crypto.Salt.Size)">
            <summary> Creates n bytes of data usable as a salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.CreateBytes(System.Byte[])">
            <summary> Creates n bytes of data usable as a salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.Equals(CSharpTest.Net.Crypto.Salt)">
            <summary> Returns true if the two Salts are using the same data </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Salt.BitSize">
            <summary> Returns the size of the salt in bits </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Salt.Length">
            <summary> returns the total length of the salt in bytes </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Salt.HashCode">
            <summary>
            Returns the hash code of the current salt
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.Salt.Size">
            <summary> Size of a salt-key in bits </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Salt.Size.b64">
            <summary> 64-bit, 8-byte salt value </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Salt.Size.b128">
            <summary> 128-bit, 16-byte salt value </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Salt.Size.b256">
            <summary> 256-bit, 32-byte salt value </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Salt.Size.b512">
            <summary> 512-bit, 64-byte salt value </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Salt.Size.b1024">
            <summary> 1024-bit, 128-byte salt value </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SaltedData">
            <summary> Represents the combination of Salt and Data together </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.#ctor(System.IO.Stream)">
            <summary> Seperates the salt from the data provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.#ctor(System.Byte[])">
            <summary> Seperates the salt from the data provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.#ctor(System.Byte[],CSharpTest.Net.Crypto.Salt.Size)">
            <summary> Seperates the salt from the data provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.#ctor(CSharpTest.Net.Crypto.Salt,System.IO.Stream)">
            <summary> Combines the salt with the data provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.#ctor(CSharpTest.Net.Crypto.Salt,System.Byte[])">
            <summary> Combines the salt with the data provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.Dispose">
            <summary> Attempts to clear the data from memory </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.GetDataBytes">
            <summary> Returns a copy of the data bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.GetDataStream">
            <summary> Returns a stream of just the data </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.ToArray">
            <summary> Returns the Array of Salt and Data together </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.ToStream">
            <summary> Returns the Salt and Data as a stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.CombineStream(CSharpTest.Net.Crypto.Salt,System.IO.Stream)">
            <summary> Returns a stream that combines the salt and data </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SaltedData.Length">
            <summary> Returns the total length of Salt + Data </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SaltedData.Salt">
            <summary> Returns the Salt being used. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Action">
            <summary> Encapsulates a method that takes no parameters and does not return a value. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Action`2">
            <summary> Encapsulates a method that has two parameters and does not return a value. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Action`3">
            <summary> Encapsulates a method that has three parameters and does not return a value. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Action`4">
            <summary> Encapsulates a method that has four parameters and does not return a value. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.EventHandlerForActiveControl`1">
            <summary>
            This derivation of EventHandlerForControl&lt;TEventArgs> will simply ignore the call
            if the control's handle is not at the time the delegate is invoked.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.EventHandlerForControl`1">
            <summary>
            Provies a wrapper type around event handlers for a control that are safe to be
            used from events on another thread.  If the control is not valid at the time the
            delegate is called an exception of type ObjectDisposedExcpetion will be raised.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Delegates.EventHandlerForControl`1._control">
            <summary> The control who's thread we will use for the invoke </summary>
        </member>
        <member name="F:CSharpTest.Net.Delegates.EventHandlerForControl`1._delegate">
            <summary> The delegate to invoke on the control </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForControl`1.#ctor(System.Windows.Forms.Control,System.EventHandler{`0})">
            <summary>
            Constructs an EventHandler for the specified method on the given control instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForControl`1.#ctor(System.Windows.Forms.Control,System.Delegate)">
            <summary>
            Constructs an EventHandler for the specified delegate converting it to the expected
            EventHandler&lt;TEventArgs> delegate type.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForControl`1.OnControlDisposed(System.Object,`0)">
            <summary>
            Used to handle the condition that a control's handle is not currently available.  This
            can either be before construction or after being disposed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForControl`1.op_Implicit(CSharpTest.Net.Delegates.EventHandlerForControl{`0})~System.EventHandler{`0}">
            <summary>
            This object will allow an implicit cast to the EventHandler&lt;T> type for easier use.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForControl`1.EventHandler(System.Object,`0)">
            <summary>
            Handles the 'magic' of safely invoking the delegate on the control without producing
            a dead-lock.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForControl`1.IsControlValid(System.Windows.Forms.Control)">
            <summary>
            Performs a thread-safe test on IsHandleCreated and returns the result.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.EventHandlerForControl`1.MethodInvokerImpl">
            <summary>
            The class is used to take advantage of a special-case in the Control.InvokeMarshaledCallbackDo()
            implementation that allows us to preserve the exception types that are thrown rather than doing
            a delegate.DynamicInvoke();
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForActiveControl`1.#ctor(System.Windows.Forms.Control,System.EventHandler{`0})">
            <summary>
            Constructs an EventHandler for the specified method on the given control instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForActiveControl`1.#ctor(System.Windows.Forms.Control,System.Delegate)">
            <summary>
            Constructs an EventHandler for the specified method on the given control instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForActiveControl`1.OnControlDisposed(System.Object,`0)">
            <summary>
            Handle the case when the control is not valid
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.ForcedEventHandlerForControl`1">
            <summary>
            This derivation of EventHandlerForControl&lt;TEventArgs> will directly call the delegate
            on the current thread if the control's handle is not valid rather than raising the
            ObjectDisposedExcpetion.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.ForcedEventHandlerForControl`1.#ctor(System.Windows.Forms.Control,System.EventHandler{`0})">
            <summary>
            Constructs an EventHandler for the specified method on the given control instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.ForcedEventHandlerForControl`1.#ctor(System.Windows.Forms.Control,System.Delegate)">
            <summary>
            Constructs an EventHandler for the specified method on the given control instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.ForcedEventHandlerForControl`1.OnControlDisposed(System.Object,`0)">
            <summary>
            Handle the case when the control is not valid
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Func`1">
            <summary> Encapsulates a method that takes no parameters and returns a value of the type specified by the TResult parameter. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Func`2">
            <summary> Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Func`3">
            <summary> Encapsulates a method that has two parameters and returns a value of the type specified by the TResult parameter. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Func`4">
            <summary> Encapsulates a method that has three parameters and returns a value of the type specified by the TResult parameter. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Func`5">
            <summary> Encapsulates a method that has four parameters and returns a value of the type specified by the TResult parameter. </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.AggregateStream">
            <summary>
            Provides a base-class that aggregates another stream object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.#ctor">
            <summary> Creates the wrapper without an underlying stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.#ctor(System.IO.Stream)">
            <summary> Creates the wrapper with the underlying stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Dispose(System.Boolean)">
            <summary> Disposes of this.Stream </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.Stream">
            <summary> Allows modifying the underlying stream </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.HexStream">
            <summary> Provides reading and writing to a stream of hexidecimal characters. </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexStream.#ctor(System.IO.Stream,System.Security.Cryptography.CryptoStreamMode)">
            <summary> Provides reading and writing to a stream of hexidecimal characters. </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.HexStream.Transform">
            <summary> Provides a crypto-transform used to read/write to a stream of hexidecimal characters. </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexStream.Transform.#ctor(System.Security.Cryptography.CryptoStreamMode)">
            <summary> Provides a crypto-transform used to read/write to a stream of hexidecimal characters. </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.SegmentedMemoryStream">
            <summary>
            Creates a stream over an array of byte arrays in memory to reduce use of the LOH and array resizing operation.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.#ctor">
            <summary>
            Creates a memory stream that uses 32k segments for storage
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.#ctor(System.Int32)">
            <summary>
            Create a memory stream that uses the specified size of segments
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TempDirectory">
            <summary>
            Provides a class for managing a temporary directory and making reasonable a attempt to remove it upon disposal.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.CreatePath">
            <summary>
            Creates a new temp directory path that is not currently in use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Attach(System.String)">
            <summary>
            Attaches a new instances of a TempFile to the provided directory path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Delete(System.String)">
            <summary>
            Safely delete the provided directory name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.#ctor">
            <summary>
            Constructs a new temp directory with a newly created directory.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.#ctor(System.String)">
            <summary>
            Manage the provided directory path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Finalize">
            <summary>
            Removes the directory if Dispose() is not called
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Dispose">
            <summary> Disposes of the temporary directory </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Dispose(System.Boolean)">
            <summary>
            Disposes of the temporary directory
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Detatch">
            <summary>
            Detatches this instance from the temporary directory and returns the temp directory's path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Delete">
            <summary>
            Deletes the current temp directory immediatly if it exists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.CopyTo(System.String)">
            <summary>
            Copies the file content to the specified target file name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies the directory content to the specified target directory name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.DeepCopy(System.String,System.String,System.Boolean)">
            <summary>
            Creates a deep-copy of the directory contents
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempDirectory.TempPath">
            <summary>
            Returns the temporary directory path being managed.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempDirectory.Exists">
            <summary>
            Returns true if the current temp directory exists.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempDirectory.Info">
            <summary>
            Returns the FileInfo object for this temp directory.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TransactFile">
            <summary>
            Creates a temp file based on the given file being replaced and when a call to Commit() is 
            made the target file is replaced with the current contents of the temporary file.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TempFile">
            <summary>
            Provides a class for managing a temporary file and making reasonable a attempt to remove it upon disposal.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Attach(System.String)">
            <summary>
            Attaches a new instances of a TempFile to the provided file path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.FromExtension(System.String)">
            <summary>
            Creates a temp file having the provided extension
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.CreateTempPath(System.String)">
            <summary>
            Creates a temp file having the provided extension
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.FromCopy(System.String)">
            <summary>
            Creates a temp file having a copy of the specified file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Delete(System.String)">
            <summary>
            Safely delete the provided file name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.#ctor">
            <summary>
            Constructs a new temp file with a newly created/empty file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.#ctor(System.String)">
            <summary>
            Manage the provided file path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Finalize">
            <summary>
            Removes the file if Dispose() is not called
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Dispose">
            <summary> Disposes of the temporary file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Dispose(System.Boolean)">
            <summary>
            Disposes of the temporary file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Detatch">
            <summary>
            Detatches this instance from the temporary file and returns the temp file's path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.ReadAllBytes">
            <summary> Reads all bytes from the file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.WriteAllBytes(System.Byte[])">
            <summary> Writes all bytes to the file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.ReadAllText">
            <summary> Reads all UTF8 text from the file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.WriteAllText(System.String)">
            <summary> Writes all UTF8 text to the file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Delete">
            <summary>
            Deletes the current temp file immediatly if it exists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Create">
            <summary>
            Re-Creates and Opens the temporary file for writing, multiple calls will truncate existing data.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Open">
            <summary>
            Open or Create the temporary file for reading and writing
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Read">
            <summary>
            Opens the temporary file for reading
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Read(System.IO.FileShare)">
            <summary>
            Opens the temporary file for reading
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.CopyTo(System.String)">
            <summary>
            Copies the file content to the specified target file name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies the file content to the specified target file name
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempFile.TempPath">
            <summary>
            Returns the temporary file path being managed.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempFile.Exists">
            <summary>
            Returns true if the current temp file exists.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempFile.Length">
            <summary>
            Gets or sets the current length of the temp file.  If setting the length on a file that
            does not exist one will be created.  If getting the length of a file that doesnt exist
            zero will be returned.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempFile.Info">
            <summary>
            Returns the FileInfo object for this temp file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactFile.#ctor(System.String)">
            <summary>
            Creates a temp file based on the given file being replaced and when a call to Commit() is 
            made the target file is replaced with the current contents of the temporary file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactFile.Commit">
            <summary>
            Commits the replace operation on the file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactFile.Dispose(System.Boolean)">
            <summary>
            Disposes of the open stream and the temporary file.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactFile.TargetFile">
            <summary>
            Returns the originally provided filename that is being replaced
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.DisposingStream">
            <summary>
            Servers a dual-role, it can prevent an aggregated stream from disposing, or
            it can manage other objects that need to be disposed when the stream is disposed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.DisposingStream.#ctor(System.IO.Stream)">
            <summary> Create the wrapper on the provided stream, add disposables via WithDosposeOf(...) </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.DisposingStream.Dispose(System.Boolean)">
            <summary> Disposes of the stream and then all objects in the disposable list </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.DisposingStream.WithDisposeOf(System.IDisposable)">
            <summary> Adds an object to this stream that will be disposed when the stream is disposed. </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.IOStream">
            <summary>
            A collection of Stream helpers
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.ReadAllBytes(System.IO.Stream)">
            <summary> Reads all of the bytes from the input stream, input stream will be disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.ReadAllText(System.IO.Stream,System.Text.Encoding)">
            <summary> Reads all of the bytes from the input stream, input stream will be disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Read(System.IO.Stream,System.Byte[])">
            <summary> Reads a the number of bytes specified or throws IOException </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Read(System.IO.Stream,System.Int32)">
            <summary> Reads a the number of bytes specified or throws IOException </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Read(System.IO.Stream,System.Byte[],System.Int32)">
            <summary> Reads a the number of bytes specified or throws IOException </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.ReadChunk(System.IO.Stream,System.Byte[],System.Int32)">
            <summary> Attempts to read the number of bytes specified and returns the actual count </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary> Copy the entire input stream to the provided output stream, input stream will be disposed </summary>
            <returns> The number of bytes copied </returns>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.CopyStream(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary> Copy the specified number of bytes from the input stream to the provided output stream </summary>
            <returns> The number of bytes copied </returns>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Compress(System.String)">
            <summary> Compress the existing file using an in-place replace. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Compress(System.String,System.String)">
            <summary> Compress the existing file to the specified target. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Compress(System.IO.Stream,System.IO.Stream)">
            <summary> Compress the contents of the source stream into the target stream. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Decompress(System.String)">
            <summary> Decompress the existing file using an in-place replace. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Decompress(System.String,System.String)">
            <summary> Decompress the existing file to the specified target. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary> Decompress the source stream to the specified target stream. </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.CombinedStream">
            <summary> Creates a single 'pseudo' stream out of multiple input streams </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.CombinedStream.#ctor(System.IO.Stream[])">
            <summary> Creates a single 'pseudo' stream out of multiple input streams </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.CombinedStream.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary> Creates a single 'pseudo' stream out of multiple input streams </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.CombinedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary> Reads from the next stream available </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.CombinedStream.Dispose(System.Boolean)">
            <summary> Disposes of all remaining streams. </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.CombinedStream.CanRead">
            <summary>  </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.NonClosingStream">
            <summary>
            Provides a stream wrapper that will not close/dispose the underlying stream
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.NonClosingStream.#ctor(System.IO.Stream)">
            <summary> Creates a wrapper around the provided stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.NonClosingStream.Dispose(System.Boolean)">
            <summary> Prevents the disposal of the aggregated stream </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.AssemblyRunner">
            <summary>
            Create an AppDomain configured to run the .Net Assembly provided and marshalls Console input/output to and
            from the app domain when run.  This allow a more performant execution of .Net command-line tools while
            keeping with *most* of the behavior of running out-of-process.  Some serious side effects can occur when
            using Environment.* settings like CurrentDirectory and ExitCode since these are shared with the appdomain.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.IRunner">
            <summary>
            The common interface between spawning processes, and spawning scripts.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.Kill">
            <summary> Kills the process if it is still running </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.WaitForExit">
            <summary> Closes std::in and waits for the process to exit </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.WaitForExit(System.TimeSpan)">
            <summary> Closes std::in and waits for the process to exit, returns false if the process did not exit in the time given </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.Run">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.Run(System.String[])">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.Run(System.IO.TextReader,System.String[])">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.Start">
            <summary> Starts the process and returns. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.Start(System.String[])">
            <summary> Starts the process and returns. </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.IRunner.OutputReceived">
            <summary> Notifies caller of writes to the std::err or std::out </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.IRunner.ProcessExited">
            <summary> Notifies caller when the process exits </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.IRunner.StandardInput">
            <summary> Allows writes to the std::in for the process </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.IRunner.ExitCode">
            <summary> Waits for the process to exit and returns the exit code </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.IRunner.IsRunning">
            <summary> Returns true if this instance is running a process </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.IRunner.WorkingDirectory">
            <summary> Gets or sets the initial working directory for the process. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.#ctor(System.String)">
            <summary>
            Constructs the AppDomain for the given executable by using it's path for the base directory and configuraiton file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Finalize">
            <summary>
            Ensures clean-up of the app domain... This has to be pushed off of the GC Cleanup thread as AppDoamin.Unload will
            fail on GC thread.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.UnloadDomain(System.AppDomain)">
            <summary> Ignores errors from the AppDomain.Unload since exceptions would be unhandled. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.ToString">
            <summary> Returns a debug-view string of process/arguments to execute </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Kill">
            <summary> Kills the process if it is still running </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.WaitForExit">
            <summary> Closes std::in and waits for the process to exit </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.WaitForExit(System.TimeSpan)">
            <summary> Closes std::in and waits for the process to exit, returns false if the process did not exit in the time given </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.WaitForExit(System.TimeSpan,System.Boolean)">
            <summary> Waits for the process to exit, returns false if the process did not exit in the time given </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Run">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Run(System.String[])">
            <summary> Runs the process with additional arguments and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Run(System.IO.TextReader,System.String[])">
            <summary> Runs the process with additional arguments and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Start">
            <summary> Starts the process and returns. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Start(System.String[])">
            <summary> Starts the process with additional arguments and returns. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Start(System.IO.TextReader,System.String[])">
            <summary> Starts the process with additional arguments and returns. </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.AssemblyRunner.IsDisposed">
            <summary>
            Returns true if this object's worker domain has been unloaded.
            </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.AssemblyRunner.OutputReceived">
            <summary> Notifies caller of writes to the std::err or std::out </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.AssemblyRunner.ProcessExited">
            <summary> Notifies caller when the process exits </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.AssemblyRunner.WorkingDirectory">
            <summary> Gets or sets the initial working directory for the process. </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.AssemblyRunner.ExitCode">
            <summary> Waits for the process to exit and returns the exit code </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.AssemblyRunner.IsRunning">
            <summary> Returns true if this instance is running a process </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ProcessExitedEventHandler">
            <summary>
            Raised when a process started with the ProcessRunner exits
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ProcessExitedEventArgs">
            <summary>
            Carries the exit code of the exited process.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessExitedEventArgs.ExitCode">
            <summary>
            Returns the environment exit code of the process
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ProcessOutputEventHandler">
            <summary> A delegate that handles the write to either std::out or std::in for a process </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ProcessOutputEventArgs">
            <summary> 
            The event args that contains information about the line of text written to either
            std::out or std::in on the created process. 
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessOutputEventArgs.Data">
            <summary> Returns the line of text written to standard out/error  </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessOutputEventArgs.Error">
            <summary> Returns true if the line of text was written to std::error </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ProcessRunner">
            <summary>
            Creates/Spawns a process with the standard error/out/in all mapped.  Subscribe to
            the OutputReceived event prior to start/run to listen to the program output, write
            to the StandardInput for input.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.#ctor(System.String)">
            <summary>Creates a ProcessRunner for the given executable </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.#ctor(System.String,System.String[])">
            <summary>Creates a ProcessRunner for the given executable and arguments </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Dispose">
            <summary> Detaches event handlers and closes input streams </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.ToString">
            <summary> Returns a debug-view string of process/arguments to execute </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Kill">
            <summary> Kills the process if it is still running </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.WaitForExit">
            <summary> Closes std::in and waits for the process to exit </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.WaitForExit(System.TimeSpan)">
            <summary> Closes std::in and waits for the process to exit, returns false if the process did not exit in the time given </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.WaitForExit(System.TimeSpan,System.Boolean)">
            <summary> Waits for the process to exit, returns false if the process did not exit in the time given </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Run">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Run(System.String[])">
            <summary> Runs the process with additional arguments and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Run(System.IO.TextReader,System.String[])">
            <summary> Runs the process with additional arguments and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.RunFormatArgs(System.Object[])">
            <summary> 
            Calls String.Format() for each argument this runner was constructed with giving the object
            array as the arguments.  Once complete it runs the process with the new set of arguments and
            returns the exit code.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Start">
            <summary> Starts the process and returns. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Start(System.String[])">
            <summary> Starts the process with additional arguments and returns. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.StartFormatArgs(System.Object[])">
            <summary> 
            Calls String.Format() for each argument this runner was constructed with giving the object
            array as the arguments.  Once complete it starts the process with the new set of arguments and
            returns.
            </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.ProcessRunner.OutputReceived">
            <summary> Notifies caller of writes to the std::err or std::out </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.ProcessRunner.ProcessExited">
            <summary> Notifies caller when the process exits </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessRunner.StandardInput">
            <summary> Allows writes to the std::in for the process </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessRunner.WorkingDirectory">
            <summary> Gets or sets the initial working directory for the process. </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessRunner.ExitCode">
            <summary> Waits for the process to exit and returns the exit code </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessRunner.IsRunning">
            <summary> Returns true if this instance is running a process </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ScriptEngine">
            <summary>
            Defines the information needed to run various types of scripts on a Windows host
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptEngine.GetDefaults(CSharpTest.Net.Processes.ScriptEngine.Language)">
            <summary>
            Returns the default execution options for the specified scripting type
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptEngine.Compile(System.String)">
            <summary> Preprocessing/Compiler routine </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptEngine.ScriptType">
            <summary> Returns the type/language of the script </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptEngine.Executable">
            <summary> The script engine executable </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptEngine.ArgumentFormat">
            <summary> The arguments to run the script </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptEngine.FileExtension">
            <summary> The file extension of the script </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptEngine.RunOptions">
            <summary> The run options </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptEngine.UsesStandardInputScript">
            <summary>
            Returns true if the script should be fed into the std::in stream of the script process
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ScriptEngine.Language">
            <summary>
            Defines the languages we know how to run, or 'Other' when user-defined
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.JScript">
            <summary> .JS Javascript file </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.VBScript">
            <summary> .VBS VBScript file </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.Cmd">
            <summary> .CMD Shell Script </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.PowerShell">
            <summary> PowerShell (v2, or v1) </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.CSharp">
            <summary> .CS C# Program </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.VBNet">
            <summary> Visual Basic .Net Program </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.Exe">
            <summary> The script is an executable's path </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ScriptEngine.Options">
            <summary>
            Options for script execution
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Options.None">
            <summary></summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Options.UsesStandardInputScript">
            <summary> Sends the script to the process via std::in rather than using a temp file </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ScriptRunner">
            <summary>
            Defines a way to run scripts as an external process and capture their output.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.#ctor(CSharpTest.Net.Processes.ScriptEngine.Language,System.String)">
            <summary>
            Creates a runnable script with the specified language
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.#ctor(CSharpTest.Net.Processes.ScriptEngine,System.String)">
            <summary>
            Creates a runnable script with the specified engine parameters
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Kill">
            <summary> Kills the process if it is still running </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.WaitForExit">
            <summary> Closes std::in and waits for the process to exit </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.WaitForExit(System.TimeSpan)">
            <summary> Closes std::in and waits for the process to exit, returns false if the process did not exit in the time given </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Run">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Run(System.String[])">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Run(System.IO.TextReader,System.String[])">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Start">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Start(System.String[])">
            <summary> Starts the process and returns. </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.ScriptEngine">
            <summary> Return teh script engine being used </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.ScriptArguments">
            <summary> Return teh arguments to pass to script engine exe </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.ScriptFile">
            <summary> Returns the temp file of the script </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.ScriptRunner.OutputReceived">
            <summary> Notifies caller of writes to the std::err or std::out </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.ScriptRunner.ProcessExited">
            <summary> Notifies caller when the process exits </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.StandardInput">
            <summary> Allows writes to the std::in for the process </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.ExitCode">
            <summary> Waits for the process to exit and returns the exit code </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.WorkingDirectory">
            <summary> Gets or sets the initial working directory for the process. </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.IsRunning">
            <summary> Returns true if this instance is running a process </summary>
        </member>
        <member name="T:CSharpTest.Net.Reflection.ObjectSerializer">
            <summary>
            Container for a serializer of object properties
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Reflection.PropertySerializer">
            <summary>
            Represents a set of properties that can be iterated, read, or written to an IPropertyStorage
            instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer.#ctor(System.Type,System.String[])">
            <summary>
            Creates a property serializer for the specified type and optionally the properties specified.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer.AddMember(System.String)">
            <summary>
            Adds a single item to the named property collection, again can be a nested property by
            using a path or dotted notation "ClientRectangle.X".
            <seealso cref="M:CSharpTest.Net.Reflection.PropertyValue.TraverseProperties(System.Object,System.String[])"/>
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer.Serialize(System.Object,CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Writes all properties to the specified proeprty serialization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer.Deserialize(System.Object,CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Reads all properties from the specified proeprty serialization
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Reflection.PropertySerializer.ContinueOnError">
            <summary>
            Gets or sets a value that controls whether exceptions are swallowed and logged durring
            serialization or deserialization routines.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.ObjectSerializer.#ctor(System.Object,System.String[])">
            <summary>
            Constructs a 'bag-o-property' serializer for the given object instance.
            </summary>
            <param name="instance">The instance whos properties are to be serialized</param>
            <param name="namePaths">optionally named paths to the properties to seralize</param>
        </member>
        <member name="M:CSharpTest.Net.Reflection.ObjectSerializer.Serialize(CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Writes all properties to the specified proeprty serialization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.ObjectSerializer.Deserialize(CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Reads all properties from the specified proeprty serialization
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Reflection.PropertySerializer`1">
            <summary>
            Represents a set of properties that can be iterated, read, or written to an IPropertyStorage
            instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer`1.#ctor(System.String[])">
            <summary>
            Creates a property serializer for the specified type T and optionally the properties specified.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer`1.Serialize(`0,CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Writes all properties to the specified proeprty serialization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer`1.Deserialize(`0,CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Reads all properties from the specified proeprty serialization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer`1.Serialize(System.Object,CSharpTest.Net.Serialization.INameValueStore)">
            <summary> Hides the base class method </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer`1.Deserialize(System.Object,CSharpTest.Net.Serialization.INameValueStore)">
            <summary> Hides the base class method </summary>
        </member>
        <member name="T:CSharpTest.Net.Reflection.PropertyType">
            <summary>
            Allows reflection upon a property or field by name.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.#ctor(System.Type,System.String)">
            <summary>
            Constructs the PropertyType info from a source type and an instance property or field name
            <example>
            PropertyType pt = new PropertyType(typeof(Form), "ClientRectangle");
            Assert.AreEqual(typeof(Rectangle), pt.Type);
            Assert.AreEqual("ClientRectangle", pt.Name);
            </example>
            </summary>
            <param name="type">Any System.Type object to find the property or field on</param>
            <param name="name">The name of the property or field to find</param>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.TraverseProperties(System.Type,System.String[])">
            <summary>
            Walks a heirarchy of properties from the given type down.  You can specify in any of the 
            following ways: "ClientRectangle.X", "ClientRectangle/X"
            </summary>
            <example>
            <code>
            //dotted notation:
            PropertyType pt = PropertyType.TraverseProperties(typeof(Form), "ClientRectangle.X");
            //path notation:
            PropertyType pt = PropertyType.TraverseProperties(typeof(Form), "ClientRectangle/X");
            //individual names:
            PropertyType pt = PropertyType.TraverseProperties(typeof(Form), "ClientRectangle", "X");
            </code>
            </example>
            <param name="fromType">Any System.Type object to traverse from</param>
            <param name="propertyNames">The name of the properties or fields usually '.' delimited</param>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.GetValue(System.Object)">
            <summary>
            Returns the value of the property for the specified instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.SetValue(System.Object,System.Object)">
            <summary>
            Sets the specified value for the instance supplied
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of all of the custom attributes defined on this member, excluding named 
            attributes, or an empty array if there are no custom attributes.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes defined on this member, identified by type, or an
            empty array if there are no custom attributes of that type.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.IsDefined(System.Type,System.Boolean)">
            <summary>
            Indicates whether one or more instance of <paramref name="attributeType"/> is defined 
            on this member.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Reflection.PropertyType.Name">
            <summary>
            Returns the name of the property/field
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Reflection.PropertyType.Type">
            <summary>
            Returns the type of the property/field
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Reflection.PropertyValue`1">
            <summary>
            Allows setting or getting a property or field of a known type on an object via reflection
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Reflection.PropertyValue">
            <summary>
            Allows setting or getting a property or field on an object via reflection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyValue.#ctor(System.Object,System.String)">
            <summary>
            Provided an instance of an object and the name of a property/field this object
            allows you to set/get the value in that property/field
            </summary>
            <param name="instance">An instance of an object to retrieve the property/field from</param>
            <param name="name">The name of the property or field</param>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyValue.TraverseProperties(System.Object,System.String[])">
            <summary>
            Walks a heirarchy of properties from the given type down.  You can specify in any of the 
            following ways: "ClientRectangle.X", "ClientRectangle/X"
            </summary>
            <example>
            <code>
            //dotted notation:
            PropertyValue pt = PropertyValue.TraverseProperties(this.TopLevelControl, "ClientRectangle.X");
            //path notation:
            PropertyValue pt = PropertyValue.TraverseProperties(this.TopLevelControl, "ClientRectangle/X");
            //individual names:
            PropertyValue pt = PropertyValue.TraverseProperties(this.TopLevelControl, "ClientRectangle", "X");
            </code>
            </example>
            <param name="instance">Any object to begin the traverse from</param>
            <param name="propertyNames">The name of the properties or fields usually '.' delimited</param>
        </member>
        <member name="P:CSharpTest.Net.Reflection.PropertyValue.Value">
            <summary>
            Gets or sets the value of the property
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyValue`1.#ctor(System.Object,System.String)">
            <summary>
            Provided an instance of an object and the name of a property/field this object
            allows you to set/get the value in that property/field
            </summary>
            <param name="instance">An instance of an object to retrieve the property/field from</param>
            <param name="name">The name of the property or field</param>
        </member>
        <member name="P:CSharpTest.Net.Reflection.PropertyValue`1.Value">
            <summary>
            Gets or sets the value of the property
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Resources.InvalidFileExtension(System.String)">
            <summary>
            Invalid file extension: '{0}'.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Resources.StringConverterTryParse(System.Type)">
            <summary>
            The type {0} is not convertable from a string.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.IOStreamCompressionFailed">
            <summary>
              Looks up a localized string similar to Failed to compress/decompress the full input stream..
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.IOStreamFailedToRead">
            <summary>
              Looks up a localized string similar to Failed to read from input stream..
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ProcessRunnerAlreadyRunning">
            <summary>
              Looks up a localized string similar to The running process must first exit..
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Resources.FormatStrings">
            <summary>
            Returns the raw format strings.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.FormatStrings.InvalidFileExtension_string_ext_">
            <summary>
            Invalid file extension: '{0}'.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.FormatStrings.StringConverterTryParse_System_Type_type_">
            <summary>
            The type {0} is not convertable from a string.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.INameValueStore">
            <summary>
            provides a basic inteface for a reader/writer of string name/value pairs
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.INameValueStore.Read(System.String,System.String,System.String@)">
            <summary>
            returns true if the property was successfully retireved into the output
            variable 'value'
            </summary>
            <param name="path">Optional path for context information</param>
            <param name="name">The name of the property</param>
            <param name="value">Returns the output value if available</param>
            <returns>true if successful or false if data not available</returns>
        </member>
        <member name="M:CSharpTest.Net.Serialization.INameValueStore.Write(System.String,System.String,System.String)">
            <summary>
            Writes the given property by name
            </summary>
            <param name="path">Optional path for context information</param>
            <param name="name">The name of the property</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:CSharpTest.Net.Serialization.INameValueStore.Delete(System.String,System.String)">
            <summary>
            Removes a property from the storage by name
            </summary>
            <param name="path">Optional path for context information</param>
            <param name="name">The name of the property to remove</param>
        </member>
        <member name="T:CSharpTest.Net.Serialization.Storage">
            <summary>
            Used with one of the implementations in the StorageClasses namespace, this class
            provides rich-type storage on top of the basic INameValueStore string storage
            container.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.#ctor(CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Constructs a storage wrapper for the given name/value store and sets the initial
            path to the provided value.
            </summary>
            <param name="store">The storage container to use</param>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.#ctor(CSharpTest.Net.Serialization.INameValueStore,System.String)">
            <summary>
            Constructs a storage wrapper for the given name/value store and sets the initial
            path to the provided value.
            </summary>
            <param name="store">The storage container to use</param>
            <param name="contextPath">The full context of the storage item, delimit with '/' or '\'</param>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetContext(System.String)">
            <summary>
            Replaces the context path of the storage, dispose of the returned IDisposable
            to restore the Storage's previous ContextPath.
            </summary>
            <param name="contextPath">The full context path to change to</param>
            <returns>Context can be disposed to restore the previous state</returns>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Boolean)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Byte)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.SByte)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Char)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.DateTime)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.TimeSpan)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Decimal)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Double)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Single)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Guid)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Uri)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Int16)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.UInt16)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Int32)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.UInt32)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Int64)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.UInt64)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.String)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Version)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Type,System.Object)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Boolean@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Byte@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.SByte@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Char@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.DateTime@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.TimeSpan@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Decimal@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Double@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Single@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Guid@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Uri@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Int16@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.UInt16@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Int32@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.UInt32@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Int64@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.UInt64@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.String@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Version@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Type,System.Object@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Boolean)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Byte)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.SByte)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Char)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.DateTime)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.TimeSpan)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Decimal)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Double)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Single)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Guid)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Uri)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Int16)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.UInt16)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Int32)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.UInt32)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Int64)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.UInt64)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.String)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Version)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Type,System.Object)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.Delete(System.String)">
            <summary> Removes the named value from the storage </summary>
        </member>
        <member name="P:CSharpTest.Net.Serialization.Storage.ContextPath">
            <summary>
            Retrieves the current context path of the store
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.StorageClasses.RegistryStorage">
            <summary>
            Stores values in the registry at HKCU\Software\{Company}\{Product} path.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.RegistryStorage.#ctor">
            <summary>
            Stores values in the registry at HKCU\Software\{Company}\{Product} path.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.RegistryStorage.Read(System.String,System.String,System.String@)">
            <summary>
            returns true if the property was successfully retireved into the output
            variable 'value'
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.RegistryStorage.Write(System.String,System.String,System.String)">
            <summary>
            Writes the given property by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.RegistryStorage.Delete(System.String,System.String)">
            <summary>
            Removes a property from the storage by name
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.StorageClasses.IsolatedStorage">
            <summary>
            Stores values in the IsolatedStorage for the application in {Company}\{Product} path.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.IsolatedStorage.#ctor">
            <summary>
            Stores values in the IsolatedStorage for the application in {Company}\{Product} path.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.IsolatedStorage.Read(System.String,System.String,System.String@)">
            <summary>
            returns true if the property was successfully retireved into the output
            variable 'value'
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.IsolatedStorage.Write(System.String,System.String,System.String)">
            <summary>
            Writes the given property by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.IsolatedStorage.Delete(System.String,System.String)">
            <summary>
            Removes a property from the storage by name
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.StorageClasses.FileStorage">
            <summary>
            Stores values in the local %AppData% folder in the path {Company}\{Product}.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.FileStorage.#ctor">
            <summary>
            Stores values in the local %AppData% folder in the path {Company}\{Product}.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.FileStorage.Read(System.String,System.String,System.String@)">
            <summary>
            returns true if the property was successfully retireved into the output
            variable 'value'
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.FileStorage.Write(System.String,System.String,System.String)">
            <summary>
            Writes the given property by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.FileStorage.Delete(System.String,System.String)">
            <summary>
            Removes a property from the storage by name
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage">
            <summary>
            Stores values in the local application's configuration section: "AppSettings"
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.Sync">
            <summary>
            Provides syncronization across instances of AppSettingsStorage classes
            modifying the configuration file(s)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.#ctor">
            <summary>
            Stores values in the local application's configuration
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.MakePath(System.String,System.String)">
            <summary>
            Creates the full name of the item from path and name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.Open(System.String,System.Configuration.Configuration@)">
            <summary>
            Opens a configuration section and returns the key/value collection associated.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.Read(System.String,System.String,System.String@)">
            <summary>
            returns true if the property was successfully retireved into the output
            variable 'value'
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.Write(System.String,System.String,System.String)">
            <summary>
            Writes the given property by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.Delete(System.String,System.String)">
            <summary>
            Removes a property from the storage by name
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.StorageClasses.UserSettingStorage">
            <summary>
            Stores values in the local configuration section: "userSettings"
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.UserSettingStorage.#ctor">
            <summary>
            Stores values in the local application's configuration
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.UserSettingStorage.#ctor(System.Configuration.ConfigurationUserLevel)">
            <summary>
            Stores values in the local application's configuration
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.UserSettingStorage.MakePath(System.String,System.String)">
            <summary>
            Creates the full name of the item from path and name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.UserSettingStorage.Open(System.String,System.Configuration.Configuration@)">
            <summary>
            Opens a configuration section and returns the key/value collection associated.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.StorageClasses.DictionaryStorage">
            <summary>
            Stores values in a IDictionary, by default this dictionary is
            placed in the current AppDomain data slot to provide data that
            is consistant across instances of DictionaryStorage when no
            dictionary is provided to the constructor.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.DictionaryStorage.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Constructs a DictionarySTorage with a specified dictionary object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.DictionaryStorage.#ctor">
            <summary>
            dictionary is retrieved/placed in the current AppDomain data 
            slot to provide data that is consistant across instances of 
            DictionaryStorage.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.DictionaryStorage.Read(System.String,System.String,System.String@)">
            <summary>
            returns true if the property was successfully retireved into the output
            variable 'value'
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.DictionaryStorage.Write(System.String,System.String,System.String)">
            <summary>
            Writes the given property by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.DictionaryStorage.Delete(System.String,System.String)">
            <summary>
            Removes a property from the storage by name
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ExclusiveLocking">
            <summary>
            wraps the reader/writer lock 
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.LockStrategyBase">
            <summary>
            Provides a base class for locking implementations
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ILockStrategy">
            <summary>
            An interface that allows reader/writer locking with the using() statement
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.TryRead(System.TimeSpan,CSharpTest.Net.Synchronization.IReadLock@)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.TryRead(System.TimeSpan)">
            <summary>
            Returns the lock if it was successfully obtained within the timeout specified
            throws System.TimeoutException
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.TryWrite(System.TimeSpan,CSharpTest.Net.Synchronization.IWriteLock@)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.TryWrite(System.TimeSpan)">
            <summary>
            Returns the lock if it was successfully obtained within the timeout specified
            throws System.TimeoutException
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockStrategyBase.ToMilliseconds(System.TimeSpan)">
            <summary>
            Converts a TimeSpan timeout into an acceptable timout value: 
            either Timout.Infinite or: greater than or equal to 0 and less than int.MaxValue
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockStrategyBase.TryRead(System.Int32,CSharpTest.Net.Synchronization.IReadLock@)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockStrategyBase.TryWrite(System.Int32,CSharpTest.Net.Synchronization.IWriteLock@)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.LockStrategyBase.ReadLock">
            <summary>
            provides an abstract base for implementing a disposable read lock, Dispose will be
            called once and only once
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.IReadLock">
            <summary>
            Allows a read lock to be disposed or elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IReadLock.Write">
            <summary>
            Elevate to a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IReadLock.TryWrite(System.TimeSpan,CSharpTest.Net.Synchronization.IWriteLock@)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IReadLock.TryWrite(System.TimeSpan)">
            <summary>
            Returns the lock if it was successfully obtained within the timeout specified
            throws System.TimeoutException
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockStrategyBase.ReadLock.TryWrite(System.Int32,CSharpTest.Net.Synchronization.IWriteLock@)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.LockStrategyBase.WriteLock">
            <summary>
            provides an abstract base for implementing a disposable read lock, Dispose will be
            called once and only once
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.IWriteLock">
            <summary>
            Allows a write lock to be disposed
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.#ctor">
            <summary>
            wraps the reader/writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.#ctor(System.Object)">
            <summary>
            wraps the reader/writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.TryRead(System.Int32,CSharpTest.Net.Synchronization.IReadLock@)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.TryWrite(System.Int32,CSharpTest.Net.Synchronization.IWriteLock@)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.IgnoreLocking">
            <summary>
            Provides the reader/writer locking interface, but resolves to a no-op and no actual
            locking is performed.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.IgnoreLocking.Instance">
            <summary> Returns a singleton lock </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.TryRead(System.Int32,CSharpTest.Net.Synchronization.IReadLock@)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.TryWrite(System.Int32,CSharpTest.Net.Synchronization.IWriteLock@)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ReadWriteLocking">
            <summary>
            wraps the reader/writer lock 
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReadWriteLocking.#ctor">
            <summary>
            wraps the reader/writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReadWriteLocking.#ctor(System.Threading.ReaderWriterLock)">
            <summary>
            wraps the reader/writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReadWriteLocking.TryRead(System.Int32,CSharpTest.Net.Synchronization.IReadLock@)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReadWriteLocking.TryWrite(System.Int32,CSharpTest.Net.Synchronization.IWriteLock@)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Threading.UsageCounter">
            <summary>
            Provides a counter that fires a delegate on first usage and last release.  For the counts
            to be maintained someone must hold an instance of one or more of these objects.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.#ctor(System.String,System.Object[])">
            <summary> Creates a composite name with the format and arguments specified </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.#ctor(System.String)">
            <summary> The name used for the global object </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Dispose">
            <summary> Releases the resources but does not decrement counts </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.TotalCount(System.Action{System.Int32})">
            <summary> Calls the provided delegate inside lock with the current count value </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Increment">
            <summary> Increments the counter by one </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Increment``1(System.Action{``0},``0)">
            <summary> Delegate fired inside lock if this is the first Increment() call on the name provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Increment(System.Threading.ThreadStart)">
            <summary> Delegate fired inside lock if this is the first Increment() call on the name provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Decrement">
            <summary> Decrements the counter by one </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Decrement``1(System.Action{``0},``0)">
            <summary> Delegate fired inside lock if the Decrement() count reaches zero </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Decrement(System.Threading.ThreadStart)">
            <summary> Delegate fired inside lock if the Decrement() count reaches zero </summary>
        </member>
        <member name="P:CSharpTest.Net.Threading.UsageCounter.Name">
            <summary> Returns the name specified when this instance was created </summary>
        </member>
        <member name="P:CSharpTest.Net.Threading.UsageCounter.InstanceCount">
            <summary> Returns the number of times Increment() has been called on this instance </summary>
        </member>
        <member name="T:CSharpTest.Net.Constants">
            <summary>
            This class name is actually wrong... These values are only constant for the life the current
            app domain ;)
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.UNKNOWN">
            <summary> Returns the string '[Unknown]'</summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.ProcessId">
            <summary> Returns the current process id </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.ProcessName">
            <summary> Returns the current process name without an extension </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.ProcessFile">
            <summary> Returns the file path to the exe for this process </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.AppDomainName">
            <summary> Returns the current AppDomain's friendly name </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.EntryAssembly">
            <summary> Returns the entry-point assembly or the highest stack assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.ProductVersion">
            <summary> Returns the product version of the entry assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.ProductName">
            <summary> Returns the product name of the entry assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.CompanyName">
            <summary> Returns the company name of the entry assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.IsUnitTest">
            <summary> Returns true if the current process is running a unit test </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.IsDebugging">
            <summary> Returns true if a debugger is attached to the process </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.RegistrySoftwarePath">
            <summary>
            Returns the HKCU or HKLM path for this software application based
            on the process that is running: Software\{CompanyName}\{ProductName}
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.ApplicationData">
            <summary>
            Returns the roaming user profile path for the currently running software
            application: {SpecialFolder.ApplicationData}\{CompanyName}\{ProductName}
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.LocalApplicationData">
            <summary>
            Returns the non-roaming user profile path for the currently running software
            application: {SpecialFolder.LocalApplicationData}\{CompanyName}\{ProductName}
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.DefaultLogFile">
            <summary>
            Returns a default log file name derived as:
            {SpecialFolder.LocalApplicationData}\{CompanyName}\{ProductName}\{AppDomainName}.txt
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Constants.#cctor">
            <summary>
            This is some ugly code, the intent is to be able to answer the above questions in 
            a wide array of environments.  I admit now this will fail eventually.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.FileUtils">
            <summary>
            Provides utilities related to files and file paths
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.IsValidExtension(System.String)">
            <summary>
            Returns true if the extension provided contains only one '.' at the beginning
            of the string and does not contain any path or invalid filename characters.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.IsValidFileName(System.String)">
            <summary>
            Returns true if the name provided contains only valid filename characters
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.MakeValidFileName(System.String)">
            <summary>
            Creates a valid filename by removing all invalid characters.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.MakeValidFileName(System.String,System.String)">
            <summary>
            Creates a valid filename by replacing all invalid characters with the string provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.FindFullPath(System.String)">
            <summary>
            Returns the fully qualified path to the file if it is fully-qualified, exists in the current directory, or 
            in the environment path, otherwise generates a FileNotFoundException exception.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.ExpandEnvironment(System.String)">
            <summary>
            Expands environment variables into text, i.e. %SystemRoot%, or %ProgramFiles%
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.TrySearchPath(System.String,System.String@)">
            <summary>
            Returns true if the file is fully-qualified, exists in the current directory, or in the environment path, 
            otherwise generates a FileNotFoundException exception.  Will not propagate errors.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.MakeRelativePath(System.String,System.String)">
            <summary>
            For this to work for a directory the argument should end with a '\' character
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.GrantFullControlForFile(System.String,System.Security.Principal.WellKnownSidType)">
            <summary> Grants the user FullControl for the file, returns true if modified, false if already present </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.GrantFullControlForFile(System.String,System.Security.Principal.WellKnownSidType,System.Security.Principal.SecurityIdentifier)">
            <summary> Grants the user FullControl for the file, returns true if modified, false if already present </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.GetPermissions(System.String,System.Security.Principal.WellKnownSidType)">
            <summary> Returns the rights assigned to the given SID for this file's ACL </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.ReplacePermissions(System.String,System.Security.Principal.WellKnownSidType,System.Security.AccessControl.FileSystemRights)">
            <summary> Removes any existing access for the user SID supplied and adds the specified rights </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.RegexPatterns">
            <summary>
            A collection of common regular expression patterns
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.FullVersion">
            <summary>
            Matches a numeric version "1.2.3.4" up to 9 digits for a value
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.Version">
            <summary>
            Matches a numeric version with 2, 3, or 4 parts: "1.2", "1.2.3", or "1.2.3.4" up to 9 digits for a value
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.HttpUrl">
            <summary>
            Free-form matching of urls in plain text, from http://immike.net/blog/2007/04/06/5-regular-expressions-every-web-programmer-should-know/
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.MakefileMacro">
            <summary>
            Matches a makefile macro name in text, i.e. "$(field:name=value)" where field is any alpha-numeric + ('_', '-', or '.') text identifier 
            returned from group "field".  the "replace" group contains all after the identifier and before the last ')'.  "name" and "value" groups
            match the name/value replacement pairs.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.FormatSpecifier">
            <summary>
            Matches a c-sharp style format specifier in a string "{0,5:n}". The identifier may be any numeric set of characters.  The groups 
            returned will be "field", "suffix", "width", and "format".  Used with StringUtils.Transform() you can provide your own String.Format().
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.FormatNameSpecifier">
            <summary>
            Matches a c-sharp style format specifier in a string "{Name-0,5:n}" with some additional changes. Used with StringUtils.Transform() you 
            can provide your own String.Format().  The groups returned will be the following:
            "field" - An identifier may contain any alpha-numeric or one of these special characters: ('_', '-', or '.')
            "suffix" - Everything after the identifer and before the closing brace '}'
            "width" - The width part of the format is a number after a ',' and before ':'
            "format" - Everything after the the ':' and before the closing '}', note: escapes }} are not supported.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.VSErrorMessage">
            <summary>
            Matches VisualStudio style error/warning format.  The groups returned are as follows:
            path = The file path (due caution should be taken to ensure this is a file path)
            line = The line number if any
            pos = The line position if any
            error = Was it tagged as an error?
            warning = Was it tagged as a warning?
            id = The error/warning id if provided
            message = The remainder of the text line
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.Guid">
            <summary>
            Matches a guid in the common forms used with the string constructor
            of the System.Guid type:
             "ca761232ed4211cebacd00aa0057b223" 
             "ca761232-ed42-11ce-bacd-00aa0057b223" 
             "CA761232-ED42-11CE-BACD-00AA0057B223" 
            "{ca761232-ed42-11ce-bacd-00aa0057b223}" 
            "(CA761232-ED42-11CE-BACD-00AA0057B223)" 
            The following format is NOT support:
            "{0xCA761232, 0xED42, 0x11CE, {0xBA, 0xCD, 0x00, 0xAA, 0x00, 0x57, 0xB2, 0x23}}" 
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.CreditCard">
            <summary>
            This is generally not enought to fully validate a card, there are other
            ways to validate by using the build-in checksums.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.ReplaceFile">
            <summary>
            Creates a temp file based on the given file being replaced and when a call to Commit() is 
            made the target file is replaced with the current contents of the temporary file.  Use the
            TransactFile if you MUST be certain to succeed then Commit(), otherwise this implementation
            provides a 'good-enough' transaction and is optimized for larger files.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ReplaceFile.CreateDerivedFile(System.String,System.String@)">
            <summary>
            Derives a new filename that doesn't exist from the provided name, ie. file.txt becomes file.txt.~0001
            </summary>
            <param name="originalPath">the name of the file</param>
            <param name="tempfilePath">[out] the temp file name</param>
            <returns>A stream with exclusive write access to the file</returns>
        </member>
        <member name="M:CSharpTest.Net.IO.ReplaceFile.#ctor(System.String)">
            <summary>
            Creates a temp file based on the given file being replaced and when a call to Commit() is 
            made the target file is replaced with the current contents of the temporary file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ReplaceFile.#ctor(System.String,System.String)">
            <summary>
            Creates a backup of the target file when replacing using the extension provided
            </summary>
            <param name="targetName">The name of the file to replace</param>
            <param name="backupExtension">A valid file extension beginning with '.'</param>
        </member>
        <member name="M:CSharpTest.Net.IO.ReplaceFile.Commit">
            <summary>
            Commits the replace operation on the file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ReplaceFile.Dispose(System.Boolean)">
            <summary>
            Disposes of the open stream and the temporary file.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.ReplaceFile.TargetFile">
            <summary>
            Returns the originally provided filename that is being replaced
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.StringConverter">
            <summary>
            Handles the conversion of data to and from strings for serialization.  Can
            alternatly be configured to provide other transforms for display or other
            outputs.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.#ctor">
            <summary>
            Constructs a default StringConverter object for serialization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.#ctor(System.Boolean)">
            <summary>
            Constructs a StringConverter optionally populated with the default
            serialization transforms.
            </summary>
            <param name="includeDefaults">true to include default transforms</param>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.Add``1(CSharpTest.Net.Utils.StringConverter.TryParseMethod{``0},System.Converter{``0,System.String})">
            <summary>
            Adds a converter for the type TYPE that can transform the TYPE to and from a string
            </summary>
            <typeparam name="TYPE">The type that can be transformed by the delegates</typeparam>
            <param name="tryParse">A delegate method to convert from a string</param>
            <param name="toString">A delegate method to convert to a string</param>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.Remove``1">
            <summary>
            Removes the TYPE from the set of types allowed to be converted to and from strings.
            </summary>
            <typeparam name="TYPE">The type that will no longer be transformed</typeparam>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.ToString(System.Object)">
            <summary>
            Converts an object to a string if the type is registered, or ArgumentOutOfRangeException
            is thrown if no transform is registered for that type.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.ToString``1(``0)">
            <summary>
            Converts the value of TYPE to a string if the type is registered, or ArgumentOutOfRangeException
            is thrown if no transform is registered for that type.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.FromString``1(System.String)">
            <summary>
            Converts the provided string to a value of TYPE if the type is registered, 
            or raises ArgumentOutOfRangeException if no transform is registered for that type.
            Throws an ArgumentException if the string can not be converted.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.TryParse(System.String,System.Type,System.Object@)">
            <summary>
            Converts the provided string to a value of TYPE if the type is registered, 
            or raises ArgumentOutOfRangeException if no transform is registered for that type.
            </summary>
            <param name="input">The string value to convert</param>
            <param name="type">The type of the value to be converted to</param>
            <param name="value">The value once converted</param>
            <returns>True if it was able to make the conversion</returns>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.TryParse``1(System.String,``0@)">
            <summary>
            Converts the provided string to a value of TYPE if the type is registered, 
            or raises ArgumentOutOfRangeException if no transform is registered for that type.
            </summary>
            <typeparam name="TYPE">The type of the value to be converted to</typeparam>
            <param name="input">The string value to convert</param>
            <param name="value">The value once converted</param>
            <returns>True if it was able to make the conversion</returns>
        </member>
        <member name="T:CSharpTest.Net.Utils.StringConverter.TryParseMethod`1">
            <summary>
            The delegate type used to try and parse a string
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.StringUtils">
            <summary>
            Various routines for string manipulations
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.AlphaNumericOnly(System.String)">
            <summary>
            returns a new string containing only the alpha-numeric characters in the original
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.SafeFileName(System.String)">
            <summary>
            Parses the text to ensure that it is a valid file name and returns the resulting 
            string with the following offending characters replace with '-': /\:*?"'&lt;>|
            Also removes any characters class as control characters, or anything below 32 space,
            this would include tab, backspace, newline, linefeed, etc.
            If provided null, this function returns null
            </summary>
            <param name="name">The text to parse</param>
            <returns>The text provided with only allowable characters</returns>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.SafeFilePath(System.String)">
            <summary>
            Splits the string on path characters ('/' and '\\') and passes each
            to SafeFileName(), then reconstructs the string using '\\' and
            removing any empty segments. 
            If provided null, this function returns null, provided an empty
            string or just a path seperator '/' it will return String.Empty
            </summary>
            <param name="path">The text to parse</param>
            <returns>The text provided as a valid path</returns>
        </member>
        <member name="F:CSharpTest.Net.Utils.StringUtils.DefaultConverter">
            <summary>
            DO NOT EXPOSE THIS PRIVATE MEMEBER... Since the behavior of this can be changed this could have
            adverse effects in unrelated code.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.ToString``1(``0)">
            <summary>
            Converts primitives to strings so that they can be reconstituted via TryParse
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.ToString(System.Object)">
            <summary>
            Converts primitives to strings so that they can be reconstituted via TryParse
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.TryParse``1(System.String,``0@)">
            <summary>
            Reconstructs a type from a string that was previously obtained via StringUtils.ToString(T data)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.TryParse(System.String,System.Type,System.Object@)">
            <summary>
            Reconstructs a type from a string that was previously obtained via StringUtils.ToString(T data)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.Transform(System.String,System.Text.RegularExpressions.Regex,System.Converter{System.Text.RegularExpressions.Match,System.String})">
            <summary>
            Used for text-template transformation where a regex match is replaced in the input string.
            </summary>
            <param name="input">The text to perform the replacement upon</param>
            <param name="pattern">The regex used to perform the match</param>
            <param name="fnReplace">A delegate that selects the appropriate replacement text</param>
            <returns>The newly formed text after all replacements are made</returns>
        </member>
        <member name="T:CSharpTest.Net.WinForms.Win32Window">
            <summary>
            Provides a Windows.Forms implementation of the IWin32Window inteface for windows owned by
            a non-.Net window handle.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.WinForms.Win32Window.FromHandle(System.IntPtr)">
            <summary> Constructs an IWin32Window from a valid handle or returns null if handle == IntPtr.Zero </summary>
        </member>
    </members>
</doc>
